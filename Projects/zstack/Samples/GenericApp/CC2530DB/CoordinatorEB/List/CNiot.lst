###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         21/Mar/2019  15:54:23 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\CNiot\Desktop\20190310A                   #
#                          ·À»ð·ÀµÁÏµÍ³\Project\CNiot\CNiot.c                 #
#    Command line       =  -f "C:\Users\CNiot\Desktop\20190310A               #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cf #
#                          g" (-DCPU32MHZ -DROOT=__near_func                  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "C:\Users\CNiot\Desktop\20190310A                  #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.c #
#                          fg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "C:\Users\CNiot\Desktop\20190310A                  #
#                          ·À»ð·ÀµÁÏµÍ³\Project\CNiot\CNiot.c" -D CNIOT -D    #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -lC "C:\Users\CNiot\Desktop\20190310A              #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\CoordinatorEB\List\" -lA            #
#                          "C:\Users\CNiot\Desktop\20190310A                  #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\CoordinatorEB\List\"                #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "C:\Users\CNiot\Desktop\20190310A                  #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\CoordinatorEB\Obj\" -e --debug      #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Users\CNiot\Desktop\20 #
#                          190310A ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Sampl #
#                          es\GenericApp\CC2530DB\" -I                        #
#                          "C:\Users\CNiot\Desktop\20190310A                  #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\SOURCE\" -I                      #
#                          "C:\Users\CNiot\Desktop\20190310A                  #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I        #
#                          "C:\Users\CNiot\Desktop\20190310A                  #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I   #
#                          "C:\Users\CNiot\Desktop\20190310A                  #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLU #
#                          DE\" -I "C:\Users\CNiot\Desktop\20190310A          #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGE #
#                          T\CC2530EB\" -I "C:\Users\CNiot\Desktop\20190310A  #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\ #
#                          CCSOC\" -I "C:\Users\CNiot\Desktop\20190310A       #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCL #
#                          UDE\" -I "C:\Users\CNiot\Desktop\20190310A         #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\ #
#                          " -I "C:\Users\CNiot\Desktop\20190310A             #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK #
#                          \" -I "C:\Users\CNiot\Desktop\20190310A            #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC #
#                          \" -I "C:\Users\CNiot\Desktop\20190310A            #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAP #
#                          I\" -I "C:\Users\CNiot\Desktop\20190310A           #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS #
#                          \" -I "C:\Users\CNiot\Desktop\20190310A            #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO #
#                          \" -I "C:\Users\CNiot\Desktop\20190310A            #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ #
#                          " -I "C:\Users\CNiot\Desktop\20190310A             #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"    #
#                          -I "C:\Users\CNiot\Desktop\20190310A               #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\ #
#                          SADDR\" -I "C:\Users\CNiot\Desktop\20190310A       #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\ #
#                          SDATA\" -I "C:\Users\CNiot\Desktop\20190310A       #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLU #
#                          DE\" -I "C:\Users\CNiot\Desktop\20190310A          #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_ #
#                          LEVEL\" -I "C:\Users\CNiot\Desktop\20190310A       #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_L #
#                          EVEL\srf04\" -I "C:\Users\CNiot\Desktop\20190310A  #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_L #
#                          EVEL\srf04\SINGLE_CHIP\" -I                        #
#                          "C:\Users\CNiot\Desktop\20190310A                  #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\CNIOT\" -I           #
#                          "C:\Users\CNiot\Desktop\20190310A                  #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\CNIOT\ZStack_API\"   #
#                          -I "C:\Users\CNiot\Desktop\20190310A               #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\CNIOT\CC2530_API\"   #
#                          -I "C:\Users\CNiot\Desktop\20190310A               #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\CNIOT\DRIVER_API\"   #
#                          -Ohz                                               #
#    List file          =  C:\Users\CNiot\Desktop\20190310A                   #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\CoordinatorEB\List\CNiot.lst        #
#    Object file        =  C:\Users\CNiot\Desktop\20190310A                   #
#                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\CoordinatorEB\Obj\CNiot.r51         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\CNiot\Desktop\20190310A ·À»ð·ÀµÁÏµÍ³\Project\CNiot\CNiot.c
      1          #include "CNiot.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
      2          
      3          
      4          
      5          #define SMOKE
      6          #define HUMIR
      7          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      8          char* IC_UID;
   \                     IC_UID:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
      9          
     10          void Flash(void);
     11          
     12          #ifdef ZDO_COORDINATOR
     13          
     14          void InitKeyINT(void);
     15          void KEY1_Callback(void);
     16          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     17          enum SECURITY_STATE{CLOSE,WAIT,OPEN}Security;
   \                     Security:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     18          enum ALERT_STATE{NORMAL,ALERT,WARNING,DANGER}Alert; //å¥ä¾µæ¥è­¦WARNING ç«ç¾çé¾DANGER
   \                     Alert:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     19          
     20          //å®ä¿å¼å¯åè®¡ç¨åº

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     21          uint8_t SecurityOpenCountdown_TASKID;
   \                     SecurityOpenCountdown_TASKID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     22          void SecurityOpenCountdown(void);
     23          
     24          
     25          //å¥ä¾µæ¥è­¦åè®¡æ¶

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     26          uint8_t AlertWarningCountdown_TASKID;
   \                     AlertWarningCountdown_TASKID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     27          void AlertWarningCountdown(void);
     28          
     29          //å¡å·
     30          #define ADMIN_IC_MUN  2
     31          #define ADMIN_UID_NUM 8

   \                                 In  segment XDATA_ROM_C, align 1
     32          const char ADMIN_IC[ADMIN_IC_MUN][ADMIN_UID_NUM] = {
   \                     ADMIN_IC:
   \   000000   39           DB 57
   \   000001   41           DB 65
   \   000002   46           DB 70
   \   000003   34           DB 52
   \   000004   41           DB 65
   \   000005   30           DB 48
   \   000006   31           DB 49
   \   000007   30           DB 48
   \   000008   43           DB 67
   \   000009   36           DB 54
   \   00000A   32           DB 50
   \   00000B   37           DB 55
   \   00000C   46           DB 70
   \   00000D   31           DB 49
   \   00000E   38           DB 56
   \   00000F   30           DB 48
     33          {'9','A','F','4','A','0','1','0'},
     34          {'C','6','2','7','F','1','8','0'}
     35          };
     36          
     37          //èé¸£å¨
     38          #define BEEP      P0_0
     39          #define BEEP_ON   1
     40          #define BEEP_OFF  0

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41          uint8_t BEEP_RUN_FLAG;
   \                     BEEP_RUN_FLAG:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     42          
     43          //é¨ç£
     44          #define DOOR        P1_5
     45          #define DOOR_OPEN   1
     46          #define DOOR_CLOSE  0
     47          
     48          #else
     49          
     50          #ifdef SMOKE
     51          #define SMOKE_AO  P0_0
     52          #define SMOKE_DO  P1_5
     53          #endif
     54          
     55          #ifdef HUMIR
     56          #define HUMIR_IO  P1_3
     57          #endif
     58          
     59          #endif 
     60          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     61          void setup(void)
   \                     setup:
     62          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     63            Init_Serial(1,115200);
   \   000004                ; Setup parameters for call to function Init_Serial
   \   000004   90....       MOV     DPTR,#__Constant_1c200
   \   000007   12....       LCALL   ?XLOAD_R2345
   \   00000A   7901         MOV     R1,#0x1
   \   00000C   12....       LCALL   ??Init_Serial?relay
     64          
     65            //åå§åT4ç¨äºæ¯æ TimeOut
     66            T4_Init();
   \   00000F                ; Setup parameters for call to function T4_Init
   \   00000F   12....       LCALL   ??T4_Init?relay
     67          
     68            Ticker(Flash,1);
   \   000012                ; Setup parameters for call to function Ticker
   \   000012   90....       MOV     DPTR,#__Constant_3f800000
   \   000015   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000018   7A..         MOV     R2,#??Flash?relay & 0xff
   \   00001A   7B..         MOV     R3,#(??Flash?relay >> 8) & 0xff
   \   00001C   12....       LCALL   ??Ticker?relay
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
     69          
     70            //åå§åLED
     71            PinMode(P1_0,OUTPUT);
   \   000024                ; Setup parameters for call to function fPinMode
   \   000024   7908         MOV     R1,#0x8
   \   000026   7A01         MOV     R2,#0x1
   \   000028   7B02         MOV     R3,#0x2
   \   00002A   12....       LCALL   ??fPinMode?relay
     72            PinMode(P1_1,OUTPUT);
   \   00002D                ; Setup parameters for call to function fPinMode
   \   00002D   7908         MOV     R1,#0x8
   \   00002F   7A02         MOV     R2,#0x2
   \   000031   7B02         MOV     R3,#0x2
   \   000033   12....       LCALL   ??fPinMode?relay
     73            PinMode(P1_4,OUTPUT);
   \   000036                ; Setup parameters for call to function fPinMode
   \   000036   7908         MOV     R1,#0x8
   \   000038   7A10         MOV     R2,#0x10
   \   00003A   7B02         MOV     R3,#0x2
   \   00003C   12....       LCALL   ??fPinMode?relay
     74          
     75          #ifdef ZDO_COORDINATOR
     76          
     77            //åå§åèé¸£å¨
     78            PinMode(P0_0,OUTPUT);
   \   00003F                ; Setup parameters for call to function fPinMode
   \   00003F   7908         MOV     R1,#0x8
   \   000041   7A01         MOV     R2,#0x1
   \   000043   7B01         MOV     R3,#0x1
   \   000045   12....       LCALL   ??fPinMode?relay
     79            BEEP = BEEP_OFF;
   \   000048   C280         CLR     0x80.0
     80            BEEP_RUN_FLAG = 0;
   \   00004A   90....       MOV     DPTR,#BEEP_RUN_FLAG
   \   00004D   E4           CLR     A
   \   00004E   F0           MOVX    @DPTR,A
     81          
     82            //åå§åé¨ç£
     83            PinMode(P1_5,INPUT_UP);
   \   00004F                ; Setup parameters for call to function fPinMode
   \   00004F   7901         MOV     R1,#0x1
   \   000051   7A20         MOV     R2,#0x20
   \   000053   7B02         MOV     R3,#0x2
   \   000055   12....       LCALL   ??fPinMode?relay
     84            
     85          
     86            IC_Init();
   \   000058                ; Setup parameters for call to function IC_Init
   \   000058   12....       LCALL   ??IC_Init?relay
     87          
     88            OLED_Init();                      //oled åå§å  
   \   00005B                ; Setup parameters for call to function OLED_Init
   \   00005B   12....       LCALL   ??OLED_Init?relay
     89            OLED_CLS();                      //å±å¨äº® 
   \   00005E                ; Setup parameters for call to function OLED_CLS
   \   00005E   12....       LCALL   ??OLED_CLS?relay
     90            //OLED_welcome();
     91            OLED_P8x16Str(0, 0, "Security System");   //æ¾ç¤ºå¨ç¬¬ä¸è¡
   \   000061                ; Setup parameters for call to function OLED_P8x16Str
   \   000061   7C..         MOV     R4,#`?<Constant "Security System">` & 0xff
   \   000063   7D..         MOV     R5,#(`?<Constant "Security System">` >> 8) & 0xff
   \   000065   7A00         MOV     R2,#0x0
   \   000067   7900         MOV     R1,#0x0
   \   000069   12....       LCALL   ??OLED_P8x16Str?relay
     92            OLED_P8x16Str(0, 2, "Security:CLOSE");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
   \   00006C                ; Setup parameters for call to function OLED_P8x16Str
   \   00006C   7C..         MOV     R4,#`?<Constant "Security:CLOSE">` & 0xff
   \   00006E   7D..         MOV     R5,#(`?<Constant "Security:CLOSE">` >> 8) & 0xff
   \   000070   7A02         MOV     R2,#0x2
   \   000072   7900         MOV     R1,#0x0
   \   000074   12....       LCALL   ??OLED_P8x16Str?relay
     93            OLED_P8x16Str(0, 4, "Alert:NORMAL");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
   \   000077                ; Setup parameters for call to function OLED_P8x16Str
   \   000077   7C..         MOV     R4,#`?<Constant "Alert:NORMAL">` & 0xff
   \   000079   7D..         MOV     R5,#(`?<Constant "Alert:NORMAL">` >> 8) & 0xff
   \   00007B   7A04         MOV     R2,#0x4
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   12....       LCALL   ??OLED_P8x16Str?relay
     94            OLED_P8x16Str(0, 6, "2019-03-30");     //æ¾ç¤ºå¨ç¬¬åè¡
   \   000082                ; Setup parameters for call to function OLED_P8x16Str
   \   000082   7C..         MOV     R4,#`?<Constant "2019-03-30">` & 0xff
   \   000084   7D..         MOV     R5,#(`?<Constant "2019-03-30">` >> 8) & 0xff
   \   000086   7A06         MOV     R2,#0x6
   \   000088   7900         MOV     R1,#0x0
   \   00008A   12....       LCALL   ??OLED_P8x16Str?relay
     95          
     96            //åå§åKEY
     97            attachInterrupt(P0_1,KEY1_Callback,FALL);//ä½¿ç¨æé®1å¼å¯å®é²
   \   00008D                ; Setup parameters for call to function fattachInterrupt
   \   00008D   7901         MOV     R1,#0x1
   \   00008F   7C..         MOV     R4,#??KEY1_Callback?relay & 0xff
   \   000091   7D..         MOV     R5,#(??KEY1_Callback?relay >> 8) & 0xff
   \   000093   7A02         MOV     R2,#0x2
   \   000095   7B01         MOV     R3,#0x1
   \   000097   12....       LCALL   ??fattachInterrupt?relay
     98          
     99            LED2 = LED2_OFF;
   \   00009A   D291         SETB    0x90.1
    100            Security = CLOSE;  //å®ä¿å³é­
   \   00009C   90....       MOV     DPTR,#Security
   \   00009F   E4           CLR     A
   \   0000A0   F0           MOVX    @DPTR,A
    101          
    102            Alert = NORMAL;     //è­¦ææ­£å¸¸
   \   0000A1   90....       MOV     DPTR,#Alert
   \   0000A4   F0           MOVX    @DPTR,A
    103          #else
    104          
    105          
    106          #ifdef SMOKE
    107            PinMode(P1_5,INPUT_UP);
    108          #endif
    109          
    110          #ifdef HUMIR
    111            PinMode(P1_3,INPUT_DOWN);
    112          #endif
    113          
    114          
    115          #endif 
    116          
    117            Printf(0," Sys is ready\r\n");
   \   0000A5                ; Setup parameters for call to function Printf
   \   0000A5   7A..         MOV     R2,#`?<Constant " Sys is ready\\r\\n">` & 0xff
   \   0000A7   7B..         MOV     R3,#(`?<Constant " Sys is ready\\r\\n">` >> 8) & 0xff
   \   0000A9   F9           MOV     R1,A
   \   0000AA   12....       LCALL   ??Printf?relay
    118          }
   \   0000AD                REQUIRE ?Subroutine0
   \   0000AD                REQUIRE _A_P0
   \   0000AD                REQUIRE _A_P1
   \   0000AD                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    119          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    120          void loop(void)
   \                     loop:
    121          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    122          #ifdef ZDO_COORDINATOR
    123            uint8_t i,j,flag;
    124            
    125            IC_UID = IC_ReadUID();
   \   000005                ; Setup parameters for call to function IC_ReadUID
   \   000005   12....       LCALL   ??IC_ReadUID?relay
   \   000008   90....       MOV     DPTR,#IC_UID
   \   00000B   EA           MOV     A,R2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   EB           MOV     A,R3
   \   00000F   F0           MOVX    @DPTR,A
    126            if( IC_UID != NULL )
   \   000010   90....       MOV     DPTR,#IC_UID
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??loop_0 & 0xFFFF
    127            {
    128              Printf(0,"UID:%s\r\n",IC_UID);
   \   00001F                ; Setup parameters for call to function Printf
   \   00001F   90....       MOV     DPTR,#IC_UID
   \   000022   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000025   7A..         MOV     R2,#`?<Constant "UID:%s\\r\\n">` & 0xff
   \   000027   7B..         MOV     R3,#(`?<Constant "UID:%s\\r\\n">` >> 8) & 0xff
   \   000029   7900         MOV     R1,#0x0
   \   00002B   12....       LCALL   ??Printf?relay
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
    129              for(i=0; i<ADMIN_IC_MUN; i++)
   \   000033   7E00         MOV     R6,#0x0
    130              {
    131                flag = 1;
   \                     ??loop_1:
   \   000035   7F01         MOV     R7,#0x1
    132          
    133                for(j=0; j<ADMIN_UID_NUM; j++)
   \   000037   7C00         MOV     R4,#0x0
    134                  if( IC_UID[j] != ADMIN_IC[i][j] )
   \                     ??loop_2:
   \   000039   8C82         MOV     DPL,R4
   \   00003B   AA82         MOV     R2,DPL
   \   00003D   90....       MOV     DPTR,#IC_UID
   \   000040   E0           MOVX    A,@DPTR
   \   000041   2A           ADD     A,R2
   \   000042   F8           MOV     R0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   3400         ADDC    A,#0x0
   \   000047   8882         MOV     DPL,R0
   \   000049   F583         MOV     DPH,A
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FD           MOV     R5,A
   \   00004D   8E..         MOV     ?V0 + 0,R6
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   7403         MOV     A,#0x3
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?S_SHL
   \   000059   74..         MOV     A,#ADMIN_IC & 0xff
   \   00005B   25..         ADD     A,?V0 + 0
   \   00005D   F8           MOV     R0,A
   \   00005E   74..         MOV     A,#(ADMIN_IC >> 8) & 0xff
   \   000060   35..         ADDC    A,?V0 + 1
   \   000062   F9           MOV     R1,A
   \   000063   E8           MOV     A,R0
   \   000064   2A           ADD     A,R2
   \   000065   F582         MOV     DPL,A
   \   000067   E9           MOV     A,R1
   \   000068   3400         ADDC    A,#0x0
   \   00006A   F583         MOV     DPH,A
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   6D           XRL     A,R5
   \   00006E   6002         JZ      ??loop_3
    135                    flag = 0;
   \   000070   7F00         MOV     R7,#0x0
   \                     ??loop_3:
   \   000072   0C           INC     R4
   \   000073   EC           MOV     A,R4
   \   000074   C3           CLR     C
   \   000075   9408         SUBB    A,#0x8
   \   000077   40C0         JC      ??loop_2
    136          
    137                if( flag )
   \   000079   EF           MOV     A,R7
   \   00007A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00007C   5032         JNC     ??loop_4
    138                {
    139                  if( Security == OPEN )
   \   00007E   90....       MOV     DPTR,#Security
   \   000081   E0           MOVX    A,@DPTR
   \   000082   6402         XRL     A,#0x2
   \   000084   702A         JNZ     ??loop_4
    140                  {
    141                    Security = CLOSE;
   \   000086   E4           CLR     A
   \   000087   F0           MOVX    @DPTR,A
    142                    Alert = NORMAL;
   \   000088   90....       MOV     DPTR,#Alert
   \   00008B   F0           MOVX    @DPTR,A
    143                    BEEP_RUN_FLAG = 0;
   \   00008C   90....       MOV     DPTR,#BEEP_RUN_FLAG
   \   00008F   F0           MOVX    @DPTR,A
    144                    BEEP = BEEP_OFF;
   \   000090   C280         CLR     0x80.0
    145                    Printf(0,"Security Close\r\n");
   \   000092                ; Setup parameters for call to function Printf
   \   000092   7A..         MOV     R2,#`?<Constant "Security Close\\r\\n">` & 0xff
   \   000094   7B..         MOV     R3,#(`?<Constant "Security Close\\r\\n">` >> 8) & 0xff
   \   000096   F9           MOV     R1,A
   \   000097   12....       LCALL   ??Printf?relay
    146                    OLED_P8x16Str(0, 2, "Security:CLOSE");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
   \   00009A                ; Setup parameters for call to function OLED_P8x16Str
   \   00009A   7C..         MOV     R4,#`?<Constant "Security:CLOSE">` & 0xff
   \   00009C   7D..         MOV     R5,#(`?<Constant "Security:CLOSE">` >> 8) & 0xff
   \   00009E   7A02         MOV     R2,#0x2
   \   0000A0   7900         MOV     R1,#0x0
   \   0000A2   12....       LCALL   ??OLED_P8x16Str?relay
    147                    OLED_P8x16Str(0, 4, "Alert:NORMAL ");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
   \   0000A5                ; Setup parameters for call to function OLED_P8x16Str
   \   0000A5   7C..         MOV     R4,#`?<Constant "Alert:NORMAL ">` & 0xff
   \   0000A7   7D..         MOV     R5,#(`?<Constant "Alert:NORMAL ">` >> 8) & 0xff
   \   0000A9   7A04         MOV     R2,#0x4
   \   0000AB   7900         MOV     R1,#0x0
   \   0000AD   12....       LCALL   ??OLED_P8x16Str?relay
    148                  }
    149                }
    150                
    151              }
   \                     ??loop_4:
   \   0000B0   0E           INC     R6
   \   0000B1   EE           MOV     A,R6
   \   0000B2   C3           CLR     C
   \   0000B3   9402         SUBB    A,#0x2
   \   0000B5   5003         JNC     $+5
   \   0000B7   02....       LJMP    ??loop_1 & 0xFFFF
    152              IC_UID = NULL;
   \   0000BA   90....       MOV     DPTR,#IC_UID
   \   0000BD   E4           CLR     A
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   F0           MOVX    @DPTR,A
    153            }
    154              
    155          
    156          
    157            if( Security == OPEN )
   \                     ??loop_0:
   \   0000C1   90....       MOV     DPTR,#Security
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   6402         XRL     A,#0x2
   \   0000C7   7028         JNZ     ??loop_5
    158            {
    159          
    160              if( DOOR == DOOR_OPEN && Alert == NORMAL  )
   \   0000C9   A295         MOV     C,0x90.5
   \   0000CB   5024         JNC     ??loop_5
   \   0000CD   90....       MOV     DPTR,#Alert
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   701E         JNZ     ??loop_5
    161              {
    162                if( DOOR == DOOR_OPEN ) 
   \   0000D3   A295         MOV     C,0x90.5
   \   0000D5   501A         JNC     ??loop_5
    163                {
    164                  Alert = ALERT;
   \   0000D7   7401         MOV     A,#0x1
   \   0000D9   F0           MOVX    @DPTR,A
    165                  AlertWarningCountdown_TASKID = Ticker(AlertWarningCountdown,1);
   \   0000DA                ; Setup parameters for call to function Ticker
   \   0000DA   90....       MOV     DPTR,#__Constant_3f800000
   \   0000DD   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000E0   7A..         MOV     R2,#??AlertWarningCountdown?relay & 0xff
   \   0000E2   7B..         MOV     R3,#(??AlertWarningCountdown?relay >> 8) & 0xff
   \   0000E4   12....       LCALL   ??Ticker?relay
   \   0000E7   7404         MOV     A,#0x4
   \   0000E9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EC   E9           MOV     A,R1
   \   0000ED   90....       MOV     DPTR,#AlertWarningCountdown_TASKID
   \   0000F0   F0           MOVX    @DPTR,A
    166                }
    167              }
    168            }
    169          #else 
    170          
    171          
    172          
    173          #endif 
    174          }
   \                     ??loop_5:
   \   0000F1   02....       LJMP    ??Subroutine4_0 & 0xFFFF
   \   0000F4                REQUIRE _A_P0
   \   0000F4                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    175          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          void Flash(void)
   \                     Flash:
    177          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    178            LED1 = !LED1;
   \   000004   D2F0         SETB    B.0
   \   000006   A290         MOV     C,0x90.0
   \   000008   30F001       JNB     B.0,??Flash_0
   \   00000B   B3           CPL     C
   \                     ??Flash_0:
   \   00000C   9290         MOV     0x90.0,C
    179            Printf(0,"^");
   \   00000E                ; Setup parameters for call to function Printf
   \   00000E   7A..         MOV     R2,#`?<Constant "^">` & 0xff
   \   000010   7B..         MOV     R3,#(`?<Constant "^">` >> 8) & 0xff
   \   000012   7900         MOV     R1,#0x0
   \   000014   12....       LCALL   ??Printf?relay
    180          
    181          #ifdef ZDO_COORDINATOR
    182            if( BEEP_RUN_FLAG )
   \   000017   90....       MOV     DPTR,#BEEP_RUN_FLAG
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   600A         JZ      ??Flash_1
    183            {
    184              BEEP = !BEEP;
   \   00001D   D2F0         SETB    B.0
   \   00001F   A280         MOV     C,0x80.0
   \   000021   30F001       JNB     B.0,??Flash_2
   \   000024   B3           CPL     C
   \                     ??Flash_2:
   \   000025   9280         MOV     0x80.0,C
    185            }
    186          #else
    187          
    188          #ifdef SMOKE
    189          
    190            if( SMOKE_DO == 0 )
    191            {
    192              if( SMOKE_DO == 0 )
    193              {
    194                SendPoint(0x0000,"S:1");
    195                Printf(0,"S:1\r\n");
    196              }
    197            }
    198            
    199          #endif
    200          
    201          #ifdef HUMIR
    202            
    203            if( HUMIR_IO == 1 )
    204            {
    205              if( HUMIR_IO == 1 )
    206              {
    207                SendPoint(0x0000,"H:1");
    208                Printf(0,"H:1\r\n");
    209              }
    210            }
    211          
    212          #endif
    213          
    214          #endif
    215          }
   \                     ??Flash_1:
   \   000027   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00002A                REQUIRE _A_P1
   \   00002A                REQUIRE _A_P0
    216          
    217          #ifdef ZDO_COORDINATOR
    218          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    219          void KEY1_Callback(void)
   \                     KEY1_Callback:
    220          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    221            while(KEY1);//ç­å¾æé®ç¨³å®
   \                     ??KEY1_Callback_0:
   \   000004   A281         MOV     C,0x80.1
   \   000006   40FC         JC      ??KEY1_Callback_0
    222          
    223            if( Security == CLOSE )
   \   000008   90....       MOV     DPTR,#Security
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   702E         JNZ     ??KEY1_Callback_1
    224            {
    225              Security = WAIT;
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    226              SecurityOpenCountdown_TASKID = Ticker(SecurityOpenCountdown,1);
   \   000011                ; Setup parameters for call to function Ticker
   \   000011   90....       MOV     DPTR,#__Constant_3f800000
   \   000014   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000017   7A..         MOV     R2,#??SecurityOpenCountdown?relay & 0xff
   \   000019   7B..         MOV     R3,#(??SecurityOpenCountdown?relay >> 8) & 0xff
   \   00001B   12....       LCALL   ??Ticker?relay
   \   00001E   7404         MOV     A,#0x4
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
   \   000023   E9           MOV     A,R1
   \   000024   90....       MOV     DPTR,#SecurityOpenCountdown_TASKID
   \   000027   F0           MOVX    @DPTR,A
    227              Printf(0,"Security Wait\r\n");
   \   000028                ; Setup parameters for call to function Printf
   \   000028   7A..         MOV     R2,#`?<Constant "Security Wait\\r\\n">` & 0xff
   \   00002A   7B..         MOV     R3,#(`?<Constant "Security Wait\\r\\n">` >> 8) & 0xff
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   12....       LCALL   ??Printf?relay
    228              OLED_P8x16Str(0, 2, "Security: Wait");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
   \   000031                ; Setup parameters for call to function OLED_P8x16Str
   \   000031   7C..         MOV     R4,#`?<Constant "Security: Wait">` & 0xff
   \   000033   7D..         MOV     R5,#(`?<Constant "Security: Wait">` >> 8) & 0xff
   \   000035   7A02         MOV     R2,#0x2
   \   000037   7900         MOV     R1,#0x0
   \   000039   12....       LCALL   ??OLED_P8x16Str?relay
    229            }
    230          
    231          }
   \                     ??KEY1_Callback_1:
   \   00003C   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00003F                REQUIRE _A_P0
    232          
    233          //å®é²å¼å¯åè®¡æ¶

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    234          void SecurityOpenCountdown(void)
   \                     SecurityOpenCountdown:
    235          { 
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    236            static uint8_t OpenCountdown = 10;
    237            
    238            LED2 = !LED2;
   \   000005   D2F0         SETB    B.0
   \   000007   A291         MOV     C,0x90.1
   \   000009   30F001       JNB     B.0,??SecurityOpenCountdown_0
   \   00000C   B3           CPL     C
   \                     ??SecurityOpenCountdown_0:
   \   00000D   9291         MOV     0x90.1,C
    239            BEEP = BEEP_ON;
   \   00000F   D280         SETB    0x80.0
    240            Printf(0,"Security Warning %d\r\n",OpenCountdown);
   \   000011                ; Setup parameters for call to function Printf
   \   000011   90....       MOV     DPTR,#??OpenCountdown
   \   000014   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   7A..         MOV     R2,#`?<Constant "Security Warning %d\\r\\n">` & 0xff
   \   00001C   7B..         MOV     R3,#(`?<Constant "Security Warning %d\\r\\n">` >> 8) & 0xff
   \   00001E   7900         MOV     R1,#0x0
   \   000020   12....       LCALL   ??Printf?relay
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
    241            if( --OpenCountdown <= 0 && Security == WAIT )
   \   000028   90....       MOV     DPTR,#??OpenCountdown
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   14           DEC     A
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   7032         JNZ     ??SecurityOpenCountdown_1
   \   000030   90....       MOV     DPTR,#Security
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6401         XRL     A,#0x1
   \   000036   702A         JNZ     ??SecurityOpenCountdown_1
    242            {
    243              TickerDel(SecurityOpenCountdown_TASKID);
   \   000038                ; Setup parameters for call to function TickerDel
   \   000038   90....       MOV     DPTR,#SecurityOpenCountdown_TASKID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??TickerDel?relay
    244              LED2 = LED2_ON;
   \   000040   C291         CLR     0x90.1
    245              Security = OPEN;
   \   000042   90....       MOV     DPTR,#Security
   \   000045   7402         MOV     A,#0x2
   \   000047   F0           MOVX    @DPTR,A
    246              OpenCountdown = 10;
   \   000048   90....       MOV     DPTR,#??OpenCountdown
   \   00004B   740A         MOV     A,#0xa
   \   00004D   F0           MOVX    @DPTR,A
    247              Printf(0,"Security Open\r\n");
   \   00004E                ; Setup parameters for call to function Printf
   \   00004E   7A..         MOV     R2,#`?<Constant "Security Open\\r\\n">` & 0xff
   \   000050   7B..         MOV     R3,#(`?<Constant "Security Open\\r\\n">` >> 8) & 0xff
   \   000052   7900         MOV     R1,#0x0
   \   000054   12....       LCALL   ??Printf?relay
    248              OLED_P8x16Str(0, 2, "Security: OPEN");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
   \   000057                ; Setup parameters for call to function OLED_P8x16Str
   \   000057   7C..         MOV     R4,#`?<Constant "Security: OPEN">` & 0xff
   \   000059   7D..         MOV     R5,#(`?<Constant "Security: OPEN">` >> 8) & 0xff
   \   00005B   7A02         MOV     R2,#0x2
   \   00005D   7900         MOV     R1,#0x0
   \   00005F   12....       LCALL   ??OLED_P8x16Str?relay
    249            }
    250            BEEP = BEEP_OFF;
   \                     ??SecurityOpenCountdown_1:
   \   000062                REQUIRE ?Subroutine1
   \   000062                REQUIRE _A_P1
   \   000062                REQUIRE _A_P0
   \   000062                ; // Fall through to label ?Subroutine1
    251          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   C280         CLR     0x80.0
   \   000002                REQUIRE ??Subroutine4_0
   \   000002                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   75..00       MOV     ?V0 + 1,#0x0
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   22           RET

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??OpenCountdown:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for OpenCountdown>`
   \   000001                REQUIRE __INIT_XDATA_I
    252          
    253          //å¥ä¾µæ¥è­¦åè®¡æ¶

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          void AlertWarningCountdown(void)
   \                     AlertWarningCountdown:
    255          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    256            static uint8_t WarningCountdown = 10;
    257            
    258            LED2 = !LED2;
   \   000005   D2F0         SETB    B.0
   \   000007   A291         MOV     C,0x90.1
   \   000009   30F001       JNB     B.0,??AlertWarningCountdown_0
   \   00000C   B3           CPL     C
   \                     ??AlertWarningCountdown_0:
   \   00000D   9291         MOV     0x90.1,C
    259            BEEP = BEEP_ON;
   \   00000F   D280         SETB    0x80.0
    260            Printf(0,"WARNING Wait %d\r\n",WarningCountdown);
   \   000011                ; Setup parameters for call to function Printf
   \   000011   90....       MOV     DPTR,#??WarningCountdown
   \   000014   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   7A..         MOV     R2,#`?<Constant "WARNING Wait %d\\r\\n">` & 0xff
   \   00001C   7B..         MOV     R3,#(`?<Constant "WARNING Wait %d\\r\\n">` >> 8) & 0xff
   \   00001E   7900         MOV     R1,#0x0
   \   000020   12....       LCALL   ??Printf?relay
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
    261            if( --WarningCountdown <= 0 && Alert == ALERT )
   \   000028   90....       MOV     DPTR,#??WarningCountdown
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   14           DEC     A
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   7037         JNZ     ??AlertWarningCountdown_1
   \   000030   90....       MOV     DPTR,#Alert
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6401         XRL     A,#0x1
   \   000036   702F         JNZ     ??AlertWarningCountdown_1
    262            {
    263              TickerDel(AlertWarningCountdown_TASKID);
   \   000038                ; Setup parameters for call to function TickerDel
   \   000038   90....       MOV     DPTR,#AlertWarningCountdown_TASKID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??TickerDel?relay
    264              LED2 = LED2_ON;
   \   000040   C291         CLR     0x90.1
    265              Alert = WARNING;
   \   000042   90....       MOV     DPTR,#Alert
   \   000045   7402         MOV     A,#0x2
   \   000047   F0           MOVX    @DPTR,A
    266              BEEP_RUN_FLAG = 1;
   \   000048   90....       MOV     DPTR,#BEEP_RUN_FLAG
   \   00004B   14           DEC     A
   \   00004C   F0           MOVX    @DPTR,A
    267              WarningCountdown = 10;
   \   00004D   90....       MOV     DPTR,#??WarningCountdown
   \   000050   740A         MOV     A,#0xa
   \   000052   F0           MOVX    @DPTR,A
    268              Printf(0,"Alert WARNING\r\n");
   \   000053                ; Setup parameters for call to function Printf
   \   000053   7A..         MOV     R2,#`?<Constant "Alert WARNING\\r\\n">` & 0xff
   \   000055   7B..         MOV     R3,#(`?<Constant "Alert WARNING\\r\\n">` >> 8) & 0xff
   \   000057   7900         MOV     R1,#0x0
   \   000059   12....       LCALL   ??Printf?relay
    269              OLED_P8x16Str(0, 4, "Alert:WARNING");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
   \   00005C                ; Setup parameters for call to function OLED_P8x16Str
   \   00005C   7C..         MOV     R4,#`?<Constant "Alert:WARNING">` & 0xff
   \   00005E   7D..         MOV     R5,#(`?<Constant "Alert:WARNING">` >> 8) & 0xff
   \   000060   7A04         MOV     R2,#0x4
   \   000062   7900         MOV     R1,#0x0
   \   000064   12....       LCALL   ??OLED_P8x16Str?relay
    270            }
    271            BEEP = BEEP_OFF;
   \                     ??AlertWarningCountdown_1:
   \   000067   80..         SJMP    ?Subroutine1
   \   000069                REQUIRE _A_P1
   \   000069                REQUIRE _A_P0
    272          }

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??WarningCountdown:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for WarningCountdown>`
   \   000001                REQUIRE __INIT_XDATA_I
    273          
    274          #else
    275          
    276          #endif
    277          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    278          void Serial_CallBack(uint8_t port, uint8_t* buf)
   \                     Serial_CallBack:
    279          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    280            Printf(port,"OK\r\n");
   \   000005                ; Setup parameters for call to function Printf
   \   000005   7A..         MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000007   7B..         MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000009   12....       LCALL   ??Printf?relay
    281          }
   \   00000C                REQUIRE ?Subroutine2
   \   00000C                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    282          
    283          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    284          void MessageProcess(uint16_t addr, uint8_t *data)
   \                     MessageProcess:
    285          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 2,R4
   \   000007   8D..         MOV     ?V0 + 3,R5
    286            LED3 =!LED3;
   \   000009   D2F0         SETB    B.0
   \   00000B   A294         MOV     C,0x90.4
   \   00000D   30F001       JNB     B.0,??MessageProcess_0
   \   000010   B3           CPL     C
   \                     ??MessageProcess_0:
   \   000011   9294         MOV     0x90.4,C
    287            Printf(0,"Receive:%d>_%s\r\n",addr,data);
   \   000013                ; Setup parameters for call to function Printf
   \   000013   78..         MOV     R0,#?V0 + 2
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   8A..         MOV     ?V0 + 0,R2
   \   00001A   8B..         MOV     ?V0 + 1,R3
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   7A..         MOV     R2,#`?<Constant "Receive:%d>_%s\\r\\n">` & 0xff
   \   000023   7B..         MOV     R3,#(`?<Constant "Receive:%d>_%s\\r\\n">` >> 8) & 0xff
   \   000025   7900         MOV     R1,#0x0
   \   000027   12....       LCALL   ??Printf?relay
   \   00002A   7404         MOV     A,#0x4
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
    288          #ifdef ZDO_COORDINATOR
    289            char data_name=(char)*data;
    290            int data_value=(int)*(data+2);
   \   00002F   85..82       MOV     DPL,?V0 + 2
   \   000032   85..83       MOV     DPH,?V0 + 3
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
    291          
    292            
    293            //Printf(0,"name:%d  value:%d\r\n",data_name,data_value);
    294          
    295          
    296            if( Security == OPEN )
   \   000039   90....       MOV     DPTR,#Security
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   6402         XRL     A,#0x2
   \   00003F   7051         JNZ     ??MessageProcess_1
    297            {
    298              switch (data_name)
   \   000041   85..82       MOV     DPL,?V0 + 2
   \   000044   85..83       MOV     DPH,?V0 + 3
   \   000047   E0           MOVX    A,@DPTR
   \   000048   24B8         ADD     A,#-0x48
   \   00004A   6024         JZ      ??MessageProcess_2
   \   00004C   24F5         ADD     A,#-0xb
   \   00004E   7042         JNZ     ??MessageProcess_1
    299              {
    300                case 'S':
    301                  if( data_value )
   \   000050   E8           MOV     A,R0
   \   000051   603F         JZ      ??MessageProcess_1
    302                  {
    303                    Alert = DANGER; 
   \   000053   90....       MOV     DPTR,#Alert
   \   000056   7403         MOV     A,#0x3
   \   000058   F0           MOVX    @DPTR,A
    304                    BEEP_RUN_FLAG = 1;
   \   000059   90....       MOV     DPTR,#BEEP_RUN_FLAG
   \   00005C   7401         MOV     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
    305                    OLED_P8x16Str(0, 4, "Alert:DANGER ");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
   \   00005F                ; Setup parameters for call to function OLED_P8x16Str
   \   00005F   7C..         MOV     R4,#`?<Constant "Alert:DANGER ">` & 0xff
   \   000061   7D..         MOV     R5,#(`?<Constant "Alert:DANGER ">` >> 8) & 0xff
   \   000063   7A04         MOV     R2,#0x4
   \   000065   7900         MOV     R1,#0x0
   \   000067   12....       LCALL   ??OLED_P8x16Str?relay
    306                    Printf(0,"DANGER\r\n");
   \   00006A                ; Setup parameters for call to function Printf
   \   00006A   7A..         MOV     R2,#`?<Constant "DANGER\\r\\n">` & 0xff
   \   00006C   7B..         MOV     R3,#(`?<Constant "DANGER\\r\\n">` >> 8) & 0xff
   \   00006E   801D         SJMP    ??MessageProcess_3
    307                  }
    308                  break;
    309          
    310                case 'H':
    311                  if( data_value )
   \                     ??MessageProcess_2:
   \   000070   E8           MOV     A,R0
   \   000071   601F         JZ      ??MessageProcess_1
    312                  {
    313                    Alert = WARNING; 
   \   000073   90....       MOV     DPTR,#Alert
   \   000076   7402         MOV     A,#0x2
   \   000078   F0           MOVX    @DPTR,A
    314                    BEEP_RUN_FLAG = 1;
   \   000079   90....       MOV     DPTR,#BEEP_RUN_FLAG
   \   00007C   14           DEC     A
   \   00007D   F0           MOVX    @DPTR,A
    315                    OLED_P8x16Str(0, 4, "Alert:WARNING");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
   \   00007E                ; Setup parameters for call to function OLED_P8x16Str
   \   00007E   7C..         MOV     R4,#`?<Constant "Alert:WARNING">` & 0xff
   \   000080   7D..         MOV     R5,#(`?<Constant "Alert:WARNING">` >> 8) & 0xff
   \   000082   7A04         MOV     R2,#0x4
   \   000084   7900         MOV     R1,#0x0
   \   000086   12....       LCALL   ??OLED_P8x16Str?relay
    316                    Printf(0,"WARNING\r\n");
   \   000089                ; Setup parameters for call to function Printf
   \   000089   7A..         MOV     R2,#`?<Constant "WARNING\\r\\n">` & 0xff
   \   00008B   7B..         MOV     R3,#(`?<Constant "WARNING\\r\\n">` >> 8) & 0xff
   \                     ??MessageProcess_3:
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   12....       LCALL   ??Printf?relay
    317                  }
    318                  break;
    319          
    320                default:
    321                  break;
    322              }
    323          
    324            }
    325           
    326          #else
    327          
    328            
    329          #endif
    330          }
   \                     ??MessageProcess_1:
   \   000092   7F04         MOV     R7,#0x4
   \   000094   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000097                REQUIRE _A_P1
    331          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    332          void NETState_Process(devStates_t devState)
   \                     NETState_Process:
    333          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    334            switch (devState)
   \   000006   24FA         ADD     A,#-0x6
   \   000008   6013         JZ      ??NETState_Process_0
   \   00000A   14           DEC     A
   \   00000B   600A         JZ      ??NETState_Process_1
   \   00000D   24FE         ADD     A,#-0x2
   \   00000F   7015         JNZ     ??NETState_Process_2
    335            {
    336              //ä½ä¸ºåè°   
    337              case DEV_ZB_COORD:    Printf(0,"This is Coordinator\r\n");
   \   000011                ; Setup parameters for call to function Printf
   \   000011   7A..         MOV     R2,#`?<Constant "This is Coordinator\\r\\n">` & 0xff
   \   000013   7B..         MOV     R3,#(`?<Constant "This is Coordinator\\r\\n">` >> 8) & 0xff
   \   000015   800A         SJMP    ??NETState_Process_3
    338                break;
    339              //ä½ä¸ºè·¯ç±
    340              case DEV_ROUTER:      Printf(0,"This is Route\r\n");
   \                     ??NETState_Process_1:
   \   000017                ; Setup parameters for call to function Printf
   \   000017   7A..         MOV     R2,#`?<Constant "This is Route\\r\\n">` & 0xff
   \   000019   7B..         MOV     R3,#(`?<Constant "This is Route\\r\\n">` >> 8) & 0xff
   \   00001B   8004         SJMP    ??NETState_Process_3
    341                break;
    342              //ä½ä¸ºç»ç«¯
    343              case DEV_END_DEVICE:  Printf(0,"This is EndDevice\r\n");
   \                     ??NETState_Process_0:
   \   00001D                ; Setup parameters for call to function Printf
   \   00001D   7A..         MOV     R2,#`?<Constant "This is EndDevice\\r\\n">` & 0xff
   \   00001F   7B..         MOV     R3,#(`?<Constant "This is EndDevice\\r\\n">` >> 8) & 0xff
   \                     ??NETState_Process_3:
   \   000021   7900         MOV     R1,#0x0
   \   000023   12....       LCALL   ??Printf?relay
    344                                    
    345                break;
    346          
    347              default:
    348                break;
    349            }
    350          }
   \                     ??NETState_Process_2:
   \   000026   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for OpenCountdown>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for WarningCountdown>`:
   \   000000   0A           DB 10

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Flash?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Flash

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??KEY1_Callback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    KEY1_Callback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SecurityOpenCountdown?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SecurityOpenCountdown

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AlertWarningCountdown?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AlertWarningCountdown

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Serial_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Serial_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MessageProcess?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MessageProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NETState_Process?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NETState_Process

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Security System">`:
   \   000000   53656375     DB "Security System"
   \            72697479
   \            20537973
   \            74656D00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Security:CLOSE">`:
   \   000000   53656375     DB "Security:CLOSE"
   \            72697479
   \            3A434C4F
   \            534500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Alert:NORMAL">`:
   \   000000   416C6572     DB "Alert:NORMAL"
   \            743A4E4F
   \            524D414C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "2019-03-30">`:
   \   000000   32303139     DB "2019-03-30"
   \            2D30332D
   \            333000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " Sys is ready\\r\\n">`:
   \   000000   20537973     DB " Sys is ready\015\012"
   \            20697320
   \            72656164
   \            790D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UID:%s\\r\\n">`:
   \   000000   5549443A     DB "UID:%s\015\012"
   \            25730D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Security Close\\r\\n">`:
   \   000000   53656375     DB "Security Close\015\012"
   \            72697479
   \            20436C6F
   \            73650D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Alert:NORMAL ">`:
   \   000000   416C6572     DB "Alert:NORMAL "
   \            743A4E4F
   \            524D414C
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "^">`:
   \   000000   5E00         DB "^"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Security Wait\\r\\n">`:
   \   000000   53656375     DB "Security Wait\015\012"
   \            72697479
   \            20576169
   \            740D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Security: Wait">`:
   \   000000   53656375     DB "Security: Wait"
   \            72697479
   \            3A205761
   \            697400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Security Warning %d\\r\\n">`:
   \   000000   53656375     DB "Security Warning %d\015\012"
   \            72697479
   \            20576172
   \            6E696E67
   \            2025640D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Security Open\\r\\n">`:
   \   000000   53656375     DB "Security Open\015\012"
   \            72697479
   \            204F7065
   \            6E0D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Security: OPEN">`:
   \   000000   53656375     DB "Security: OPEN"
   \            72697479
   \            3A204F50
   \            454E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WARNING Wait %d\\r\\n">`:
   \   000000   5741524E     DB "WARNING Wait %d\015\012"
   \            494E4720
   \            57616974
   \            2025640D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Alert WARNING\\r\\n">`:
   \   000000   416C6572     DB "Alert WARNING\015\012"
   \            74205741
   \            524E494E
   \            470D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Alert:WARNING">`:
   \   000000   416C6572     DB "Alert:WARNING"
   \            743A5741
   \            524E494E
   \            4700    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK\\r\\n">`:
   \   000000   4F4B0D0A     DB "OK\015\012"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Receive:%d>_%s\\r\\n">`:
   \   000000   52656365     DB "Receive:%d>_%s\015\012"
   \            6976653A
   \            25643E5F
   \            25730D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Alert:DANGER ">`:
   \   000000   416C6572     DB "Alert:DANGER "
   \            743A4441
   \            4E474552
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DANGER\\r\\n">`:
   \   000000   44414E47     DB "DANGER\015\012"
   \            45520D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WARNING\\r\\n">`:
   \   000000   5741524E     DB "WARNING\015\012"
   \            494E470D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "This is Coordinator\\r\\n">`:
   \   000000   54686973     DB "This is Coordinator\015\012"
   \            20697320
   \            436F6F72
   \            64696E61
   \            746F720D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "This is Route\\r\\n">`:
   \   000000   54686973     DB "This is Route\015\012"
   \            20697320
   \            526F7574
   \            650D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "This is EndDevice\\r\\n">`:
   \   000000   54686973     DB "This is EndDevice\015\012"
   \            20697320
   \            456E6444
   \            65766963
   \            650D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1c200:
   \   000000   00C20100     DD 115200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3f800000:
   \   000000   0000803F     DD 3F800000H

   Maximum stack usage in bytes:

     Function              ISTACK PSTACK XSTACK
     --------              ------ ------ ------
     AlertWarningCountdown     0      0     12
       -> Printf               0      0     24
       -> TickerDel            0      0     20
       -> Printf               0      0     20
       -> OLED_P8x16Str        0      0     20
     Flash                     2      0      0
       -> Printf               4      0      0
     KEY1_Callback             2      0      4
       -> Ticker               4      0      8
       -> Printf               4      0      0
       -> OLED_P8x16Str        4      0      0
     MessageProcess            0      0     16
       -> Printf               0      0     32
       -> OLED_P8x16Str        0      0     24
       -> Printf               0      0     24
       -> OLED_P8x16Str        0      0     24
       -> Printf               0      0     24
     NETState_Process          0      0      9
       -> Printf               0      0     18
       -> Printf               0      0     18
       -> Printf               0      0     18
     SecurityOpenCountdown     0      0     12
       -> Printf               0      0     24
       -> TickerDel            0      0     20
       -> Printf               0      0     20
       -> OLED_P8x16Str        0      0     20
     Serial_CallBack           0      0      9
       -> Printf               0      0     18
     loop                      0      0     14
       -> IC_ReadUID           0      0     20
       -> Printf               0      0     24
       -> Printf               0      0     20
       -> OLED_P8x16Str        0      0     20
       -> OLED_P8x16Str        0      0     20
       -> Ticker               0      0     28
     setup                     2      0      4
       -> Init_Serial          4      0      0
       -> T4_Init              4      0      0
       -> Ticker               4      0      8
       -> fPinMode             4      0      0
       -> fPinMode             4      0      0
       -> fPinMode             4      0      0
       -> fPinMode             4      0      0
       -> fPinMode             4      0      0
       -> IC_Init              4      0      0
       -> OLED_Init            4      0      0
       -> OLED_CLS             4      0      0
       -> OLED_P8x16Str        4      0      0
       -> OLED_P8x16Str        4      0      0
       -> OLED_P8x16Str        4      0      0
       -> OLED_P8x16Str        4      0      0
       -> fattachInterrupt     4      0      0
       -> Printf               4      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     _A_P1                                    1
     IC_UID                                   2
     Security                                 1
     Alert                                    1
     SecurityOpenCountdown_TASKID             1
     AlertWarningCountdown_TASKID             1
     ADMIN_IC                                16
     BEEP_RUN_FLAG                            1
     setup                                  173
     ?Subroutine0                             7
     loop                                   244
     ??Subroutine4_0                          5
     Flash                                   42
     KEY1_Callback                           63
     SecurityOpenCountdown                   98
     ?Subroutine1                             2
     ?Subroutine3                             9
     OpenCountdown                            1
     AlertWarningCountdown                  105
     WarningCountdown                         1
     Serial_CallBack                         12
     ?Subroutine2                             5
     MessageProcess                         151
     NETState_Process                        41
     ?<Initializer for OpenCountdown>         1
     ?<Initializer for WarningCountdown>      1
     ??setup?relay                            6
     ??loop?relay                             6
     ??Flash?relay                            6
     ??KEY1_Callback?relay                    6
     ??SecurityOpenCountdown?relay            6
     ??AlertWarningCountdown?relay            6
     ??Serial_CallBack?relay                  6
     ??MessageProcess?relay                   6
     ??NETState_Process?relay                 6
     ?<Constant "Security System">           16
     ?<Constant "Security:CLOSE">            15
     ?<Constant "Alert:NORMAL">              13
     ?<Constant "2019-03-30">                11
     ?<Constant " Sys is ready\r\n">         16
     ?<Constant "UID:%s\r\n">                 9
     ?<Constant "Security Close\r\n">        17
     ?<Constant "Alert:NORMAL ">             14
     ?<Constant "^">                          2
     ?<Constant "Security Wait\r\n">         16
     ?<Constant "Security: Wait">            15
     ?<Constant "Security Warning %d\r\n">   22
     ?<Constant "Security Open\r\n">         16
     ?<Constant "Security: OPEN">            15
     ?<Constant "WARNING Wait %d\r\n">       18
     ?<Constant "Alert WARNING\r\n">         16
     ?<Constant "Alert:WARNING">             14
     ?<Constant "OK\r\n">                     5
     ?<Constant "Receive:%d>_%s\r\n">        17
     ?<Constant "Alert:DANGER ">             14
     ?<Constant "DANGER\r\n">                 9
     ?<Constant "WARNING\r\n">               10
     ?<Constant "This is Coordinator\r\n">   22
     ?<Constant "This is Route\r\n">         16
     ?<Constant "This is EndDevice\r\n">     20
     __Constant_1c200                         4
     __Constant_3f800000                      4

 
 957 bytes in segment BANKED_CODE
  54 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
   2 bytes in segment XDATA_I
   2 bytes in segment XDATA_ID
 382 bytes in segment XDATA_ROM_C
   7 bytes in segment XDATA_Z
 
 1 013 bytes of CODE  memory
   374 bytes of CONST memory (+ 8 bytes shared)
     0 bytes of DATA  memory (+ 2 bytes shared)
     9 bytes of XDATA memory

Errors: none
Warnings: none
