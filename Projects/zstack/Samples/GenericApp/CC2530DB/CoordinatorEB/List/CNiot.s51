///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        21/Mar/2019  15:54:23 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\CNiot\Desktop\20190310A                  /
//                          ·À»ð·ÀµÁÏµÍ³\Project\CNiot\CNiot.c                /
//    Command line       =  -f "C:\Users\CNiot\Desktop\20190310A              /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord. /
//                          cfg" (-DCPU32MHZ -DROOT=__near_func               /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\CNiot\Desktop\20 /
//                          190310A ·À»ð·ÀµÁÏµÍ³\Project\CNiot\CNiot.c" -D    /
//                          CNIOT -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D    /
//                          MT_ZDO_FUNC -lC "C:\Users\CNiot\Desktop\20190310A /
//                           ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gen /
//                          ericApp\CC2530DB\CoordinatorEB\List\" -lA         /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\CoordinatorEB\List\"              /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\CoordinatorEB\Obj\" -e --debug    /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\" -I "C:\Users\CNiot\Desktop\2019 /
//                          0310A ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Sample /
//                          s\GenericApp\CC2530DB\..\SOURCE\" -I              /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I      /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "C:\Users\CNiot\Desktop\20190310A              /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\" -I "C:\Users\CNiot\Desktop\20190310A       /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TAR /
//                          GET\CC2530EB\" -I "C:\Users\CNiot\Desktop\2019031 /
//                          0A ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\G /
//                          enericApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL /
//                          \MCU\CCSOC\" -I "C:\Users\CNiot\Desktop\20190310A /
//                           ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gen /
//                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\I /
//                          NCLUDE\" -I "C:\Users\CNiot\Desktop\20190310A     /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\A /
//                          F\" -I "C:\Users\CNiot\Desktop\20190310A          /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\" -I "C:\Users\CNiot\Desktop\20190310A         /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\" -I "C:\Users\CNiot\Desktop\20190310A         /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          API\" -I "C:\Users\CNiot\Desktop\20190310A        /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\" -I "C:\Users\CNiot\Desktop\20190310A         /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\" -I "C:\Users\CNiot\Desktop\20190310A         /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8 /
//                          W\" -I "C:\Users\CNiot\Desktop\20190310A          /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"  /
//                          -I "C:\Users\CNiot\Desktop\20190310A              /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SADDR\" -I "C:\Users\CNiot\Desktop\20190310A    /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\" -I "C:\Users\CNiot\Desktop\20190310A    /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INC /
//                          LUDE\" -I "C:\Users\CNiot\Desktop\20190310A       /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIG /
//                          H_LEVEL\" -I "C:\Users\CNiot\Desktop\20190310A    /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "C:\Users\CNiot\Desktop\2019031 /
//                          0A ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\G /
//                          enericApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\ /
//                          LOW_LEVEL\srf04\SINGLE_CHIP\" -I                  /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\CNIOT\" -I         /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\CNIOT\ZStack_API\" /
//                           -I "C:\Users\CNiot\Desktop\20190310A             /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\CNIOT\CC2530_API\" /
//                           -I "C:\Users\CNiot\Desktop\20190310A             /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\CNIOT\DRIVER_API\" /
//                           -Ohz                                             /
//    List file          =  C:\Users\CNiot\Desktop\20190310A                  /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\CoordinatorEB\List\CNiot.s51      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME CNiot

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??AlertWarningCountdown?relay
        FUNCTION ??AlertWarningCountdown?relay,0203H
        PUBLIC ??Flash?relay
        FUNCTION ??Flash?relay,0203H
        PUBLIC ??KEY1_Callback?relay
        FUNCTION ??KEY1_Callback?relay,0203H
        PUBLIC ??MessageProcess?relay
        FUNCTION ??MessageProcess?relay,0203H
        PUBLIC ??NETState_Process?relay
        FUNCTION ??NETState_Process?relay,0203H
        PUBLIC ??SecurityOpenCountdown?relay
        FUNCTION ??SecurityOpenCountdown?relay,0203H
        PUBLIC ??Serial_CallBack?relay
        FUNCTION ??Serial_CallBack?relay,0203H
        PUBLIC ??loop?relay
        FUNCTION ??loop?relay,0203H
        PUBLIC ??setup?relay
        FUNCTION ??setup?relay,0203H
        PUBLIC ADMIN_IC
        PUBLIC Alert
        PUBLIC AlertWarningCountdown
        FUNCTION AlertWarningCountdown,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC AlertWarningCountdown_TASKID
        PUBLIC BEEP_RUN_FLAG
        PUBLIC Flash
        FUNCTION Flash,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC IC_UID
        PUBLIC KEY1_Callback
        FUNCTION KEY1_Callback,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC MessageProcess
        FUNCTION MessageProcess,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC NETState_Process
        FUNCTION NETState_Process,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Security
        PUBLIC SecurityOpenCountdown
        FUNCTION SecurityOpenCountdown,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SecurityOpenCountdown_TASKID
        PUBLIC Serial_CallBack
        FUNCTION Serial_CallBack,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK __Constant_1c200
        PUBWEAK __Constant_3f800000
        PUBLIC loop
        FUNCTION loop,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC setup
        FUNCTION setup,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
Init_Serial         SYMBOL "Init_Serial"
T4_Init             SYMBOL "T4_Init"
Ticker              SYMBOL "Ticker"
fPinMode            SYMBOL "fPinMode"
IC_Init             SYMBOL "IC_Init"
OLED_Init           SYMBOL "OLED_Init"
OLED_CLS            SYMBOL "OLED_CLS"
OLED_P8x16Str       SYMBOL "OLED_P8x16Str"
fattachInterrupt    SYMBOL "fattachInterrupt"
Printf              SYMBOL "Printf"
IC_ReadUID          SYMBOL "IC_ReadUID"
TickerDel           SYMBOL "TickerDel"
??IC_Init?relay     SYMBOL "?relay", IC_Init
??IC_ReadUID?relay  SYMBOL "?relay", IC_ReadUID
??Init_Serial?relay SYMBOL "?relay", Init_Serial
??OLED_CLS?relay    SYMBOL "?relay", OLED_CLS
??OLED_Init?relay   SYMBOL "?relay", OLED_Init
??OLED_P8x16Str?relay SYMBOL "?relay", OLED_P8x16Str
??Printf?relay      SYMBOL "?relay", Printf
??T4_Init?relay     SYMBOL "?relay", T4_Init
??Ticker?relay      SYMBOL "?relay", Ticker
??TickerDel?relay   SYMBOL "?relay", TickerDel
??fPinMode?relay    SYMBOL "?relay", fPinMode
??fattachInterrupt?relay SYMBOL "?relay", fattachInterrupt
AlertWarningCountdown SYMBOL "AlertWarningCountdown"
??AlertWarningCountdown?relay SYMBOL "?relay", AlertWarningCountdown
Flash               SYMBOL "Flash"
??Flash?relay       SYMBOL "?relay", Flash
KEY1_Callback       SYMBOL "KEY1_Callback"
??KEY1_Callback?relay SYMBOL "?relay", KEY1_Callback
MessageProcess      SYMBOL "MessageProcess"
??MessageProcess?relay SYMBOL "?relay", MessageProcess
NETState_Process    SYMBOL "NETState_Process"
??NETState_Process?relay SYMBOL "?relay", NETState_Process
SecurityOpenCountdown SYMBOL "SecurityOpenCountdown"
??SecurityOpenCountdown?relay SYMBOL "?relay", SecurityOpenCountdown
Serial_CallBack     SYMBOL "Serial_CallBack"
??Serial_CallBack?relay SYMBOL "?relay", Serial_CallBack
loop                SYMBOL "loop"
??loop?relay        SYMBOL "?relay", loop
setup               SYMBOL "setup"
??setup?relay       SYMBOL "?relay", setup

        EXTERN Init_Serial
        FUNCTION Init_Serial,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN T4_Init
        FUNCTION T4_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Ticker
        FUNCTION Ticker,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN fPinMode
        FUNCTION fPinMode,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN IC_Init
        FUNCTION IC_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN OLED_Init
        FUNCTION OLED_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN OLED_CLS
        FUNCTION OLED_CLS,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN OLED_P8x16Str
        FUNCTION OLED_P8x16Str,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN fattachInterrupt
        FUNCTION fattachInterrupt,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Printf
        FUNCTION Printf,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN IC_ReadUID
        FUNCTION IC_ReadUID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN TickerDel
        FUNCTION TickerDel,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??IC_Init?relay
        FUNCTION ??IC_Init?relay,00H
        EXTERN ??IC_ReadUID?relay
        FUNCTION ??IC_ReadUID?relay,00H
        EXTERN ??Init_Serial?relay
        FUNCTION ??Init_Serial?relay,00H
        EXTERN ??OLED_CLS?relay
        FUNCTION ??OLED_CLS?relay,00H
        EXTERN ??OLED_Init?relay
        FUNCTION ??OLED_Init?relay,00H
        EXTERN ??OLED_P8x16Str?relay
        FUNCTION ??OLED_P8x16Str?relay,00H
        EXTERN ??Printf?relay
        FUNCTION ??Printf?relay,00H
        EXTERN ??T4_Init?relay
        FUNCTION ??T4_Init?relay,00H
        EXTERN ??Ticker?relay
        FUNCTION ??Ticker?relay,00H
        EXTERN ??TickerDel?relay
        FUNCTION ??TickerDel?relay,00H
        EXTERN ??fPinMode?relay
        FUNCTION ??fPinMode?relay,00H
        EXTERN ??fattachInterrupt?relay
        FUNCTION ??fattachInterrupt?relay,00H

// C:\Users\CNiot\Desktop\20190310A ·À»ð·ÀµÁÏµÍ³\Project\CNiot\CNiot.c
//    1 #include "CNiot.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1
//    2 
//    3 
//    4 
//    5 #define SMOKE
//    6 #define HUMIR
//    7 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//    8 char* IC_UID;
IC_UID:
        DS 2
        REQUIRE __INIT_XDATA_Z
//    9 
//   10 void Flash(void);
//   11 
//   12 #ifdef ZDO_COORDINATOR
//   13 
//   14 void InitKeyINT(void);
//   15 void KEY1_Callback(void);
//   16 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   17 enum SECURITY_STATE{CLOSE,WAIT,OPEN}Security;
Security:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   18 enum ALERT_STATE{NORMAL,ALERT,WARNING,DANGER}Alert; //å¥ä¾µæ¥è­¦WARNING ç«ç¾çé¾DANGER
Alert:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   19 
//   20 //å®ä¿å¼å¯åè®¡ç¨åº

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   21 uint8_t SecurityOpenCountdown_TASKID;
SecurityOpenCountdown_TASKID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   22 void SecurityOpenCountdown(void);
//   23 
//   24 
//   25 //å¥ä¾µæ¥è­¦åè®¡æ¶

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   26 uint8_t AlertWarningCountdown_TASKID;
AlertWarningCountdown_TASKID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   27 void AlertWarningCountdown(void);
//   28 
//   29 //å¡å·
//   30 #define ADMIN_IC_MUN  2
//   31 #define ADMIN_UID_NUM 8

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   32 const char ADMIN_IC[ADMIN_IC_MUN][ADMIN_UID_NUM] = {
ADMIN_IC:
        DB 57
        DB 65
        DB 70
        DB 52
        DB 65
        DB 48
        DB 49
        DB 48
        DB 67
        DB 54
        DB 50
        DB 55
        DB 70
        DB 49
        DB 56
        DB 48
//   33 {'9','A','F','4','A','0','1','0'},
//   34 {'C','6','2','7','F','1','8','0'}
//   35 };
//   36 
//   37 //èé¸£å¨
//   38 #define BEEP      P0_0
//   39 #define BEEP_ON   1
//   40 #define BEEP_OFF  0

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   41 uint8_t BEEP_RUN_FLAG;
BEEP_RUN_FLAG:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   42 
//   43 //é¨ç£
//   44 #define DOOR        P1_5
//   45 #define DOOR_OPEN   1
//   46 #define DOOR_CLOSE  0
//   47 
//   48 #else
//   49 
//   50 #ifdef SMOKE
//   51 #define SMOKE_AO  P0_0
//   52 #define SMOKE_DO  P1_5
//   53 #endif
//   54 
//   55 #ifdef HUMIR
//   56 #define HUMIR_IO  P1_3
//   57 #endif
//   58 
//   59 #endif 
//   60 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   61 void setup(void)
setup:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function setup
        CODE
//   62 {
        FUNCALL setup, Init_Serial
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, T4_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, Ticker
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, fPinMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, fPinMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, fPinMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, fPinMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, fPinMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, IC_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, OLED_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, OLED_CLS
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, OLED_P8x16Str
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, OLED_P8x16Str
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, OLED_P8x16Str
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, OLED_P8x16Str
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, fattachInterrupt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setup, Printf
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   63   Init_Serial(1,115200);
        ; Setup parameters for call to function Init_Serial
        MOV     DPTR,#__Constant_1c200
        LCALL   ?XLOAD_R2345
        MOV     R1,#0x1
        LCALL   ??Init_Serial?relay
//   64 
//   65   //åå§åT4ç¨äºæ¯æ TimeOut
//   66   T4_Init();
        ; Setup parameters for call to function T4_Init
        LCALL   ??T4_Init?relay
//   67 
//   68   Ticker(Flash,1);
        ; Setup parameters for call to function Ticker
        MOV     DPTR,#__Constant_3f800000
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#??Flash?relay & 0xff
        MOV     R3,#(??Flash?relay >> 8) & 0xff
        LCALL   ??Ticker?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
//   69 
//   70   //åå§åLED
//   71   PinMode(P1_0,OUTPUT);
        ; Setup parameters for call to function fPinMode
        MOV     R1,#0x8
        MOV     R2,#0x1
        MOV     R3,#0x2
        LCALL   ??fPinMode?relay
//   72   PinMode(P1_1,OUTPUT);
        ; Setup parameters for call to function fPinMode
        MOV     R1,#0x8
        MOV     R2,#0x2
        MOV     R3,#0x2
        LCALL   ??fPinMode?relay
//   73   PinMode(P1_4,OUTPUT);
        ; Setup parameters for call to function fPinMode
        MOV     R1,#0x8
        MOV     R2,#0x10
        MOV     R3,#0x2
        LCALL   ??fPinMode?relay
//   74 
//   75 #ifdef ZDO_COORDINATOR
//   76 
//   77   //åå§åèé¸£å¨
//   78   PinMode(P0_0,OUTPUT);
        ; Setup parameters for call to function fPinMode
        MOV     R1,#0x8
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??fPinMode?relay
//   79   BEEP = BEEP_OFF;
        CLR     0x80.0
//   80   BEEP_RUN_FLAG = 0;
        MOV     DPTR,#BEEP_RUN_FLAG
        CLR     A
        MOVX    @DPTR,A
//   81 
//   82   //åå§åé¨ç£
//   83   PinMode(P1_5,INPUT_UP);
        ; Setup parameters for call to function fPinMode
        MOV     R1,#0x1
        MOV     R2,#0x20
        MOV     R3,#0x2
        LCALL   ??fPinMode?relay
//   84   
//   85 
//   86   IC_Init();
        ; Setup parameters for call to function IC_Init
        LCALL   ??IC_Init?relay
//   87 
//   88   OLED_Init();                      //oled åå§å  
        ; Setup parameters for call to function OLED_Init
        LCALL   ??OLED_Init?relay
//   89   OLED_CLS();                      //å±å¨äº® 
        ; Setup parameters for call to function OLED_CLS
        LCALL   ??OLED_CLS?relay
//   90   //OLED_welcome();
//   91   OLED_P8x16Str(0, 0, "Security System");   //æ¾ç¤ºå¨ç¬¬ä¸è¡
        ; Setup parameters for call to function OLED_P8x16Str
        MOV     R4,#`?<Constant "Security System">` & 0xff
        MOV     R5,#(`?<Constant "Security System">` >> 8) & 0xff
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??OLED_P8x16Str?relay
//   92   OLED_P8x16Str(0, 2, "Security:CLOSE");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
        ; Setup parameters for call to function OLED_P8x16Str
        MOV     R4,#`?<Constant "Security:CLOSE">` & 0xff
        MOV     R5,#(`?<Constant "Security:CLOSE">` >> 8) & 0xff
        MOV     R2,#0x2
        MOV     R1,#0x0
        LCALL   ??OLED_P8x16Str?relay
//   93   OLED_P8x16Str(0, 4, "Alert:NORMAL");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
        ; Setup parameters for call to function OLED_P8x16Str
        MOV     R4,#`?<Constant "Alert:NORMAL">` & 0xff
        MOV     R5,#(`?<Constant "Alert:NORMAL">` >> 8) & 0xff
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ??OLED_P8x16Str?relay
//   94   OLED_P8x16Str(0, 6, "2019-03-30");     //æ¾ç¤ºå¨ç¬¬åè¡
        ; Setup parameters for call to function OLED_P8x16Str
        MOV     R4,#`?<Constant "2019-03-30">` & 0xff
        MOV     R5,#(`?<Constant "2019-03-30">` >> 8) & 0xff
        MOV     R2,#0x6
        MOV     R1,#0x0
        LCALL   ??OLED_P8x16Str?relay
//   95 
//   96   //åå§åKEY
//   97   attachInterrupt(P0_1,KEY1_Callback,FALL);//ä½¿ç¨æé®1å¼å¯å®é²
        ; Setup parameters for call to function fattachInterrupt
        MOV     R1,#0x1
        MOV     R4,#??KEY1_Callback?relay & 0xff
        MOV     R5,#(??KEY1_Callback?relay >> 8) & 0xff
        MOV     R2,#0x2
        MOV     R3,#0x1
        LCALL   ??fattachInterrupt?relay
//   98 
//   99   LED2 = LED2_OFF;
        SETB    0x90.1
//  100   Security = CLOSE;  //å®ä¿å³é­
        MOV     DPTR,#Security
        CLR     A
        MOVX    @DPTR,A
//  101 
//  102   Alert = NORMAL;     //è­¦ææ­£å¸¸
        MOV     DPTR,#Alert
        MOVX    @DPTR,A
//  103 #else
//  104 
//  105 
//  106 #ifdef SMOKE
//  107   PinMode(P1_5,INPUT_UP);
//  108 #endif
//  109 
//  110 #ifdef HUMIR
//  111   PinMode(P1_3,INPUT_DOWN);
//  112 #endif
//  113 
//  114 
//  115 #endif 
//  116 
//  117   Printf(0," Sys is ready\r\n");
        ; Setup parameters for call to function Printf
        MOV     R2,#`?<Constant " Sys is ready\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant " Sys is ready\\r\\n">` >> 8) & 0xff
        MOV     R1,A
        LCALL   ??Printf?relay
        CFI EndBlock cfiBlock0
//  118 }
        REQUIRE ?Subroutine0
        REQUIRE _A_P0
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  119 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  120 void loop(void)
loop:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function loop
        CODE
//  121 {
        FUNCALL loop, IC_ReadUID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL loop, Printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL loop, Printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL loop, OLED_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL loop, OLED_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL loop, Ticker
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  122 #ifdef ZDO_COORDINATOR
//  123   uint8_t i,j,flag;
//  124   
//  125   IC_UID = IC_ReadUID();
        ; Setup parameters for call to function IC_ReadUID
        LCALL   ??IC_ReadUID?relay
        MOV     DPTR,#IC_UID
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  126   if( IC_UID != NULL )
        MOV     DPTR,#IC_UID
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??loop_0 & 0xFFFF
//  127   {
//  128     Printf(0,"UID:%s\r\n",IC_UID);
        ; Setup parameters for call to function Printf
        MOV     DPTR,#IC_UID
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R2,#`?<Constant "UID:%s\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "UID:%s\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??Printf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  129     for(i=0; i<ADMIN_IC_MUN; i++)
        MOV     R6,#0x0
//  130     {
//  131       flag = 1;
??loop_1:
        MOV     R7,#0x1
//  132 
//  133       for(j=0; j<ADMIN_UID_NUM; j++)
        MOV     R4,#0x0
//  134         if( IC_UID[j] != ADMIN_IC[i][j] )
??loop_2:
        MOV     DPL,R4
        MOV     R2,DPL
        MOV     DPTR,#IC_UID
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#ADMIN_IC & 0xff
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,#(ADMIN_IC >> 8) & 0xff
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,R0
        ADD     A,R2
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R5
        JZ      ??loop_3
//  135           flag = 0;
        MOV     R7,#0x0
??loop_3:
        INC     R4
        MOV     A,R4
        CLR     C
        SUBB    A,#0x8
        JC      ??loop_2
//  136 
//  137       if( flag )
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        JNC     ??loop_4
//  138       {
//  139         if( Security == OPEN )
        MOV     DPTR,#Security
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??loop_4
//  140         {
//  141           Security = CLOSE;
        CLR     A
        MOVX    @DPTR,A
//  142           Alert = NORMAL;
        MOV     DPTR,#Alert
        MOVX    @DPTR,A
//  143           BEEP_RUN_FLAG = 0;
        MOV     DPTR,#BEEP_RUN_FLAG
        MOVX    @DPTR,A
//  144           BEEP = BEEP_OFF;
        CLR     0x80.0
//  145           Printf(0,"Security Close\r\n");
        ; Setup parameters for call to function Printf
        MOV     R2,#`?<Constant "Security Close\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "Security Close\\r\\n">` >> 8) & 0xff
        MOV     R1,A
        LCALL   ??Printf?relay
//  146           OLED_P8x16Str(0, 2, "Security:CLOSE");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
        ; Setup parameters for call to function OLED_P8x16Str
        MOV     R4,#`?<Constant "Security:CLOSE">` & 0xff
        MOV     R5,#(`?<Constant "Security:CLOSE">` >> 8) & 0xff
        MOV     R2,#0x2
        MOV     R1,#0x0
        LCALL   ??OLED_P8x16Str?relay
//  147           OLED_P8x16Str(0, 4, "Alert:NORMAL ");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
        ; Setup parameters for call to function OLED_P8x16Str
        MOV     R4,#`?<Constant "Alert:NORMAL ">` & 0xff
        MOV     R5,#(`?<Constant "Alert:NORMAL ">` >> 8) & 0xff
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ??OLED_P8x16Str?relay
//  148         }
//  149       }
//  150       
//  151     }
??loop_4:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x2
        JNC     $+5
        LJMP    ??loop_1 & 0xFFFF
//  152     IC_UID = NULL;
        MOV     DPTR,#IC_UID
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  153   }
//  154     
//  155 
//  156 
//  157   if( Security == OPEN )
??loop_0:
        MOV     DPTR,#Security
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??loop_5
//  158   {
//  159 
//  160     if( DOOR == DOOR_OPEN && Alert == NORMAL  )
        MOV     C,0x90.5
        JNC     ??loop_5
        MOV     DPTR,#Alert
        MOVX    A,@DPTR
        JNZ     ??loop_5
//  161     {
//  162       if( DOOR == DOOR_OPEN ) 
        MOV     C,0x90.5
        JNC     ??loop_5
//  163       {
//  164         Alert = ALERT;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  165         AlertWarningCountdown_TASKID = Ticker(AlertWarningCountdown,1);
        ; Setup parameters for call to function Ticker
        MOV     DPTR,#__Constant_3f800000
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R2,#??AlertWarningCountdown?relay & 0xff
        MOV     R3,#(??AlertWarningCountdown?relay >> 8) & 0xff
        LCALL   ??Ticker?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     DPTR,#AlertWarningCountdown_TASKID
        MOVX    @DPTR,A
//  166       }
//  167     }
//  168   }
//  169 #else 
//  170 
//  171 
//  172 
//  173 #endif 
//  174 }
??loop_5:
        LJMP    ??Subroutine4_0 & 0xFFFF
        CFI EndBlock cfiBlock2
        REQUIRE _A_P0
        REQUIRE _A_P1
//  175 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  176 void Flash(void)
Flash:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function Flash
        CODE
//  177 {
        FUNCALL Flash, Printf
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  178   LED1 = !LED1;
        SETB    B.0
        MOV     C,0x90.0
        JNB     B.0,??Flash_0
        CPL     C
??Flash_0:
        MOV     0x90.0,C
//  179   Printf(0,"^");
        ; Setup parameters for call to function Printf
        MOV     R2,#`?<Constant "^">` & 0xff
        MOV     R3,#(`?<Constant "^">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??Printf?relay
//  180 
//  181 #ifdef ZDO_COORDINATOR
//  182   if( BEEP_RUN_FLAG )
        MOV     DPTR,#BEEP_RUN_FLAG
        MOVX    A,@DPTR
        JZ      ??Flash_1
//  183   {
//  184     BEEP = !BEEP;
        SETB    B.0
        MOV     C,0x80.0
        JNB     B.0,??Flash_2
        CPL     C
??Flash_2:
        MOV     0x80.0,C
//  185   }
//  186 #else
//  187 
//  188 #ifdef SMOKE
//  189 
//  190   if( SMOKE_DO == 0 )
//  191   {
//  192     if( SMOKE_DO == 0 )
//  193     {
//  194       SendPoint(0x0000,"S:1");
//  195       Printf(0,"S:1\r\n");
//  196     }
//  197   }
//  198   
//  199 #endif
//  200 
//  201 #ifdef HUMIR
//  202   
//  203   if( HUMIR_IO == 1 )
//  204   {
//  205     if( HUMIR_IO == 1 )
//  206     {
//  207       SendPoint(0x0000,"H:1");
//  208       Printf(0,"H:1\r\n");
//  209     }
//  210   }
//  211 
//  212 #endif
//  213 
//  214 #endif
//  215 }
??Flash_1:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock3
        REQUIRE _A_P1
        REQUIRE _A_P0
//  216 
//  217 #ifdef ZDO_COORDINATOR
//  218 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  219 void KEY1_Callback(void)
KEY1_Callback:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function KEY1_Callback
        CODE
//  220 {
        FUNCALL KEY1_Callback, Ticker
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEY1_Callback, Printf
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEY1_Callback, OLED_P8x16Str
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  221   while(KEY1);//ç­å¾æé®ç¨³å®
??KEY1_Callback_0:
        MOV     C,0x80.1
        JC      ??KEY1_Callback_0
//  222 
//  223   if( Security == CLOSE )
        MOV     DPTR,#Security
        MOVX    A,@DPTR
        JNZ     ??KEY1_Callback_1
//  224   {
//  225     Security = WAIT;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  226     SecurityOpenCountdown_TASKID = Ticker(SecurityOpenCountdown,1);
        ; Setup parameters for call to function Ticker
        MOV     DPTR,#__Constant_3f800000
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#??SecurityOpenCountdown?relay & 0xff
        MOV     R3,#(??SecurityOpenCountdown?relay >> 8) & 0xff
        LCALL   ??Ticker?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        MOV     A,R1
        MOV     DPTR,#SecurityOpenCountdown_TASKID
        MOVX    @DPTR,A
//  227     Printf(0,"Security Wait\r\n");
        ; Setup parameters for call to function Printf
        MOV     R2,#`?<Constant "Security Wait\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "Security Wait\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??Printf?relay
//  228     OLED_P8x16Str(0, 2, "Security: Wait");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
        ; Setup parameters for call to function OLED_P8x16Str
        MOV     R4,#`?<Constant "Security: Wait">` & 0xff
        MOV     R5,#(`?<Constant "Security: Wait">` >> 8) & 0xff
        MOV     R2,#0x2
        MOV     R1,#0x0
        LCALL   ??OLED_P8x16Str?relay
//  229   }
//  230 
//  231 }
??KEY1_Callback_1:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock4
        REQUIRE _A_P0
//  232 
//  233 //å®é²å¼å¯åè®¡æ¶

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  234 void SecurityOpenCountdown(void)
SecurityOpenCountdown:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function SecurityOpenCountdown
        CODE
//  235 { 
        FUNCALL SecurityOpenCountdown, Printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SecurityOpenCountdown, TickerDel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SecurityOpenCountdown, Printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SecurityOpenCountdown, OLED_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  236   static uint8_t OpenCountdown = 10;
//  237   
//  238   LED2 = !LED2;
        SETB    B.0
        MOV     C,0x90.1
        JNB     B.0,??SecurityOpenCountdown_0
        CPL     C
??SecurityOpenCountdown_0:
        MOV     0x90.1,C
//  239   BEEP = BEEP_ON;
        SETB    0x80.0
//  240   Printf(0,"Security Warning %d\r\n",OpenCountdown);
        ; Setup parameters for call to function Printf
        MOV     DPTR,#??OpenCountdown
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R2,#`?<Constant "Security Warning %d\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "Security Warning %d\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??Printf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  241   if( --OpenCountdown <= 0 && Security == WAIT )
        MOV     DPTR,#??OpenCountdown
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
        JNZ     ??SecurityOpenCountdown_1
        MOV     DPTR,#Security
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SecurityOpenCountdown_1
//  242   {
//  243     TickerDel(SecurityOpenCountdown_TASKID);
        ; Setup parameters for call to function TickerDel
        MOV     DPTR,#SecurityOpenCountdown_TASKID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??TickerDel?relay
//  244     LED2 = LED2_ON;
        CLR     0x90.1
//  245     Security = OPEN;
        MOV     DPTR,#Security
        MOV     A,#0x2
        MOVX    @DPTR,A
//  246     OpenCountdown = 10;
        MOV     DPTR,#??OpenCountdown
        MOV     A,#0xa
        MOVX    @DPTR,A
//  247     Printf(0,"Security Open\r\n");
        ; Setup parameters for call to function Printf
        MOV     R2,#`?<Constant "Security Open\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "Security Open\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??Printf?relay
//  248     OLED_P8x16Str(0, 2, "Security: OPEN");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
        ; Setup parameters for call to function OLED_P8x16Str
        MOV     R4,#`?<Constant "Security: OPEN">` & 0xff
        MOV     R5,#(`?<Constant "Security: OPEN">` >> 8) & 0xff
        MOV     R2,#0x2
        MOV     R1,#0x0
        LCALL   ??OLED_P8x16Str?relay
        CFI EndBlock cfiBlock5
//  249   }
//  250   BEEP = BEEP_OFF;
??SecurityOpenCountdown_1:
        REQUIRE ?Subroutine1
        REQUIRE _A_P1
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine1
//  251 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CLR     0x80.0
        CFI EndBlock cfiBlock6
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7

        RSEG XDATA_I:XDATA:NOROOT(0)
??OpenCountdown:
        DATA8
        DS 1
        REQUIRE `?<Initializer for OpenCountdown>`
        REQUIRE __INIT_XDATA_I
//  252 
//  253 //å¥ä¾µæ¥è­¦åè®¡æ¶

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  254 void AlertWarningCountdown(void)
AlertWarningCountdown:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function AlertWarningCountdown
        CODE
//  255 {
        FUNCALL AlertWarningCountdown, Printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AlertWarningCountdown, TickerDel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AlertWarningCountdown, Printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AlertWarningCountdown, OLED_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  256   static uint8_t WarningCountdown = 10;
//  257   
//  258   LED2 = !LED2;
        SETB    B.0
        MOV     C,0x90.1
        JNB     B.0,??AlertWarningCountdown_0
        CPL     C
??AlertWarningCountdown_0:
        MOV     0x90.1,C
//  259   BEEP = BEEP_ON;
        SETB    0x80.0
//  260   Printf(0,"WARNING Wait %d\r\n",WarningCountdown);
        ; Setup parameters for call to function Printf
        MOV     DPTR,#??WarningCountdown
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R2,#`?<Constant "WARNING Wait %d\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "WARNING Wait %d\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??Printf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  261   if( --WarningCountdown <= 0 && Alert == ALERT )
        MOV     DPTR,#??WarningCountdown
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
        JNZ     ??AlertWarningCountdown_1
        MOV     DPTR,#Alert
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??AlertWarningCountdown_1
//  262   {
//  263     TickerDel(AlertWarningCountdown_TASKID);
        ; Setup parameters for call to function TickerDel
        MOV     DPTR,#AlertWarningCountdown_TASKID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??TickerDel?relay
//  264     LED2 = LED2_ON;
        CLR     0x90.1
//  265     Alert = WARNING;
        MOV     DPTR,#Alert
        MOV     A,#0x2
        MOVX    @DPTR,A
//  266     BEEP_RUN_FLAG = 1;
        MOV     DPTR,#BEEP_RUN_FLAG
        DEC     A
        MOVX    @DPTR,A
//  267     WarningCountdown = 10;
        MOV     DPTR,#??WarningCountdown
        MOV     A,#0xa
        MOVX    @DPTR,A
//  268     Printf(0,"Alert WARNING\r\n");
        ; Setup parameters for call to function Printf
        MOV     R2,#`?<Constant "Alert WARNING\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "Alert WARNING\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??Printf?relay
//  269     OLED_P8x16Str(0, 4, "Alert:WARNING");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
        ; Setup parameters for call to function OLED_P8x16Str
        MOV     R4,#`?<Constant "Alert:WARNING">` & 0xff
        MOV     R5,#(`?<Constant "Alert:WARNING">` >> 8) & 0xff
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ??OLED_P8x16Str?relay
//  270   }
//  271   BEEP = BEEP_OFF;
??AlertWarningCountdown_1:
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock8
        REQUIRE _A_P1
        REQUIRE _A_P0
//  272 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11

        RSEG XDATA_I:XDATA:NOROOT(0)
??WarningCountdown:
        DATA8
        DS 1
        REQUIRE `?<Initializer for WarningCountdown>`
        REQUIRE __INIT_XDATA_I
//  273 
//  274 #else
//  275 
//  276 #endif
//  277 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  278 void Serial_CallBack(uint8_t port, uint8_t* buf)
Serial_CallBack:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function Serial_CallBack
        CODE
//  279 {
        FUNCALL Serial_CallBack, Printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  280   Printf(port,"OK\r\n");
        ; Setup parameters for call to function Printf
        MOV     R2,#`?<Constant "OK\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
        LCALL   ??Printf?relay
        CFI EndBlock cfiBlock12
//  281 }
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock13
//  282 
//  283 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  284 void MessageProcess(uint16_t addr, uint8_t *data)
MessageProcess:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function MessageProcess
        CODE
//  285 {
        FUNCALL MessageProcess, Printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MessageProcess, OLED_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MessageProcess, Printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MessageProcess, OLED_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MessageProcess, Printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  286   LED3 =!LED3;
        SETB    B.0
        MOV     C,0x90.4
        JNB     B.0,??MessageProcess_0
        CPL     C
??MessageProcess_0:
        MOV     0x90.4,C
//  287   Printf(0,"Receive:%d>_%s\r\n",addr,data);
        ; Setup parameters for call to function Printf
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R2,#`?<Constant "Receive:%d>_%s\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "Receive:%d>_%s\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??Printf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  288 #ifdef ZDO_COORDINATOR
//  289   char data_name=(char)*data;
//  290   int data_value=(int)*(data+2);
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
//  291 
//  292   
//  293   //Printf(0,"name:%d  value:%d\r\n",data_name,data_value);
//  294 
//  295 
//  296   if( Security == OPEN )
        MOV     DPTR,#Security
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??MessageProcess_1
//  297   {
//  298     switch (data_name)
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        ADD     A,#-0x48
        JZ      ??MessageProcess_2
        ADD     A,#-0xb
        JNZ     ??MessageProcess_1
//  299     {
//  300       case 'S':
//  301         if( data_value )
        MOV     A,R0
        JZ      ??MessageProcess_1
//  302         {
//  303           Alert = DANGER; 
        MOV     DPTR,#Alert
        MOV     A,#0x3
        MOVX    @DPTR,A
//  304           BEEP_RUN_FLAG = 1;
        MOV     DPTR,#BEEP_RUN_FLAG
        MOV     A,#0x1
        MOVX    @DPTR,A
//  305           OLED_P8x16Str(0, 4, "Alert:DANGER ");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
        ; Setup parameters for call to function OLED_P8x16Str
        MOV     R4,#`?<Constant "Alert:DANGER ">` & 0xff
        MOV     R5,#(`?<Constant "Alert:DANGER ">` >> 8) & 0xff
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ??OLED_P8x16Str?relay
//  306           Printf(0,"DANGER\r\n");
        ; Setup parameters for call to function Printf
        MOV     R2,#`?<Constant "DANGER\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "DANGER\\r\\n">` >> 8) & 0xff
        SJMP    ??MessageProcess_3
//  307         }
//  308         break;
//  309 
//  310       case 'H':
//  311         if( data_value )
??MessageProcess_2:
        MOV     A,R0
        JZ      ??MessageProcess_1
//  312         {
//  313           Alert = WARNING; 
        MOV     DPTR,#Alert
        MOV     A,#0x2
        MOVX    @DPTR,A
//  314           BEEP_RUN_FLAG = 1;
        MOV     DPTR,#BEEP_RUN_FLAG
        DEC     A
        MOVX    @DPTR,A
//  315           OLED_P8x16Str(0, 4, "Alert:WARNING");  //æ¾ç¤ºå¨ç¬¬ä¸è¡
        ; Setup parameters for call to function OLED_P8x16Str
        MOV     R4,#`?<Constant "Alert:WARNING">` & 0xff
        MOV     R5,#(`?<Constant "Alert:WARNING">` >> 8) & 0xff
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ??OLED_P8x16Str?relay
//  316           Printf(0,"WARNING\r\n");
        ; Setup parameters for call to function Printf
        MOV     R2,#`?<Constant "WARNING\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "WARNING\\r\\n">` >> 8) & 0xff
??MessageProcess_3:
        MOV     R1,#0x0
        LCALL   ??Printf?relay
//  317         }
//  318         break;
//  319 
//  320       default:
//  321         break;
//  322     }
//  323 
//  324   }
//  325  
//  326 #else
//  327 
//  328   
//  329 #endif
//  330 }
??MessageProcess_1:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock14
        REQUIRE _A_P1
//  331 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  332 void NETState_Process(devStates_t devState)
NETState_Process:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function NETState_Process
        CODE
//  333 {
        FUNCALL NETState_Process, Printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NETState_Process, Printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NETState_Process, Printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  334   switch (devState)
        ADD     A,#-0x6
        JZ      ??NETState_Process_0
        DEC     A
        JZ      ??NETState_Process_1
        ADD     A,#-0x2
        JNZ     ??NETState_Process_2
//  335   {
//  336     //ä½ä¸ºåè°   
//  337     case DEV_ZB_COORD:    Printf(0,"This is Coordinator\r\n");
        ; Setup parameters for call to function Printf
        MOV     R2,#`?<Constant "This is Coordinator\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "This is Coordinator\\r\\n">` >> 8) & 0xff
        SJMP    ??NETState_Process_3
//  338       break;
//  339     //ä½ä¸ºè·¯ç±
//  340     case DEV_ROUTER:      Printf(0,"This is Route\r\n");
??NETState_Process_1:
        ; Setup parameters for call to function Printf
        MOV     R2,#`?<Constant "This is Route\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "This is Route\\r\\n">` >> 8) & 0xff
        SJMP    ??NETState_Process_3
//  341       break;
//  342     //ä½ä¸ºç»ç«¯
//  343     case DEV_END_DEVICE:  Printf(0,"This is EndDevice\r\n");
??NETState_Process_0:
        ; Setup parameters for call to function Printf
        MOV     R2,#`?<Constant "This is EndDevice\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "This is EndDevice\\r\\n">` >> 8) & 0xff
??NETState_Process_3:
        MOV     R1,#0x0
        LCALL   ??Printf?relay
//  344                           
//  345       break;
//  346 
//  347     default:
//  348       break;
//  349   }
//  350 }
??NETState_Process_2:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock15

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for OpenCountdown>`:
        DATA8
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for WarningCountdown>`:
        DATA8
        DB 10

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??setup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    setup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??loop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Flash?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Flash

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??KEY1_Callback?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    KEY1_Callback

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SecurityOpenCountdown?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SecurityOpenCountdown

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AlertWarningCountdown?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AlertWarningCountdown

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Serial_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Serial_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MessageProcess?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MessageProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??NETState_Process?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    NETState_Process

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Security System">`:
        DB "Security System"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Security:CLOSE">`:
        DB "Security:CLOSE"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Alert:NORMAL">`:
        DB "Alert:NORMAL"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "2019-03-30">`:
        DB "2019-03-30"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant " Sys is ready\\r\\n">`:
        DB " Sys is ready\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "UID:%s\\r\\n">`:
        DB "UID:%s\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Security Close\\r\\n">`:
        DB "Security Close\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Alert:NORMAL ">`:
        DB "Alert:NORMAL "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "^">`:
        DB "^"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Security Wait\\r\\n">`:
        DB "Security Wait\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Security: Wait">`:
        DB "Security: Wait"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Security Warning %d\\r\\n">`:
        DB "Security Warning %d\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Security Open\\r\\n">`:
        DB "Security Open\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Security: OPEN">`:
        DB "Security: OPEN"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "WARNING Wait %d\\r\\n">`:
        DB "WARNING Wait %d\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Alert WARNING\\r\\n">`:
        DB "Alert WARNING\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Alert:WARNING">`:
        DB "Alert:WARNING"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "OK\\r\\n">`:
        DB "OK\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Receive:%d>_%s\\r\\n">`:
        DB "Receive:%d>_%s\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Alert:DANGER ">`:
        DB "Alert:DANGER "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "DANGER\\r\\n">`:
        DB "DANGER\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "WARNING\\r\\n">`:
        DB "WARNING\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "This is Coordinator\\r\\n">`:
        DB "This is Coordinator\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "This is Route\\r\\n">`:
        DB "This is Route\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "This is EndDevice\\r\\n">`:
        DB "This is EndDevice\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1c200:
        DD 115200

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3f800000:
        DD 3F800000H

        END
// 
// 957 bytes in segment BANKED_CODE
//  54 bytes in segment BANK_RELAYS
//   2 bytes in segment SFR_AN
//   2 bytes in segment XDATA_I
//   2 bytes in segment XDATA_ID
// 382 bytes in segment XDATA_ROM_C
//   7 bytes in segment XDATA_Z
// 
// 1 013 bytes of CODE  memory
//   374 bytes of CONST memory (+ 8 bytes shared)
//     0 bytes of DATA  memory (+ 2 bytes shared)
//     9 bytes of XDATA memory
//
//Errors: none
//Warnings: none
