///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        20/Mar/2019  23:04:39 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\CNiot\Desktop\20190310A                  /
//                          ·À»ð·ÀµÁÏµÍ³\Project\CNiot\DRIVER_API\OLED.c      /
//    Command line       =  -f "C:\Users\CNiot\Desktop\20190310A              /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord. /
//                          cfg" (-DCPU32MHZ -DROOT=__near_func               /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\CNiot\Desktop\20 /
//                          190310A ·À»ð·ÀµÁÏµÍ³\Project\CNiot\DRIVER_API\OLE /
//                          D.c" -D CNIOT -D ZTOOL_P1 -D MT_TASK -D           /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -lC                    /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\CoordinatorEB\List\" -lA          /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\CoordinatorEB\List\"              /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\CoordinatorEB\Obj\" -e --debug    /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\" -I "C:\Users\CNiot\Desktop\2019 /
//                          0310A ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Sample /
//                          s\GenericApp\CC2530DB\..\SOURCE\" -I              /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I      /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "C:\Users\CNiot\Desktop\20190310A              /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\" -I "C:\Users\CNiot\Desktop\20190310A       /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TAR /
//                          GET\CC2530EB\" -I "C:\Users\CNiot\Desktop\2019031 /
//                          0A ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\G /
//                          enericApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL /
//                          \MCU\CCSOC\" -I "C:\Users\CNiot\Desktop\20190310A /
//                           ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gen /
//                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\I /
//                          NCLUDE\" -I "C:\Users\CNiot\Desktop\20190310A     /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\A /
//                          F\" -I "C:\Users\CNiot\Desktop\20190310A          /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\" -I "C:\Users\CNiot\Desktop\20190310A         /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\" -I "C:\Users\CNiot\Desktop\20190310A         /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          API\" -I "C:\Users\CNiot\Desktop\20190310A        /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\" -I "C:\Users\CNiot\Desktop\20190310A         /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\" -I "C:\Users\CNiot\Desktop\20190310A         /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8 /
//                          W\" -I "C:\Users\CNiot\Desktop\20190310A          /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"  /
//                          -I "C:\Users\CNiot\Desktop\20190310A              /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SADDR\" -I "C:\Users\CNiot\Desktop\20190310A    /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\" -I "C:\Users\CNiot\Desktop\20190310A    /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INC /
//                          LUDE\" -I "C:\Users\CNiot\Desktop\20190310A       /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIG /
//                          H_LEVEL\" -I "C:\Users\CNiot\Desktop\20190310A    /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "C:\Users\CNiot\Desktop\2019031 /
//                          0A ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\G /
//                          enericApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\ /
//                          LOW_LEVEL\srf04\SINGLE_CHIP\" -I                  /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\CNIOT\" -I         /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\CNIOT\ZStack_API\" /
//                           -I "C:\Users\CNiot\Desktop\20190310A             /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\CNIOT\CC2530_API\" /
//                           -I "C:\Users\CNiot\Desktop\20190310A             /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\CNIOT\DRIVER_API\" /
//                           -Ohz                                             /
//    List file          =  C:\Users\CNiot\Desktop\20190310A                  /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\CoordinatorEB\List\OLED.s51       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME OLED

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??DelayMS?relay
        FUNCTION ??DelayMS?relay,0203H
        PUBLIC ??Draw_BMP?relay
        FUNCTION ??Draw_BMP?relay,0203H
        PUBLIC ??OLED_CLS?relay
        FUNCTION ??OLED_CLS?relay,0203H
        PUBLIC ??OLED_DLY_ms?relay
        FUNCTION ??OLED_DLY_ms?relay,0203H
        PUBLIC ??OLED_Fill?relay
        FUNCTION ??OLED_Fill?relay,0203H
        PUBLIC ??OLED_Init?relay
        FUNCTION ??OLED_Init?relay,0203H
        PUBLIC ??OLED_P16x16Ch?relay
        FUNCTION ??OLED_P16x16Ch?relay,0203H
        PUBLIC ??OLED_P6x8Str?relay
        FUNCTION ??OLED_P6x8Str?relay,0203H
        PUBLIC ??OLED_P8x16Str?relay
        FUNCTION ??OLED_P8x16Str?relay,0203H
        PUBLIC ??OLED_Set_Pos?relay
        FUNCTION ??OLED_Set_Pos?relay,0203H
        PUBLIC ??OLED_WrCmd?relay
        FUNCTION ??OLED_WrCmd?relay,0203H
        PUBLIC ??OLED_WrDat?relay
        FUNCTION ??OLED_WrDat?relay,0203H
        PUBLIC ??OLED_welcome?relay
        FUNCTION ??OLED_welcome?relay,0203H
        PUBLIC DelayMS
        FUNCTION DelayMS,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Draw_BMP
        FUNCTION Draw_BMP,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC OLED_CLS
        FUNCTION OLED_CLS,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC OLED_DLY_ms
        FUNCTION OLED_DLY_ms,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC OLED_Fill
        FUNCTION OLED_Fill,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC OLED_Init
        FUNCTION OLED_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC OLED_P16x16Ch
        FUNCTION OLED_P16x16Ch,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC OLED_P6x8Str
        FUNCTION OLED_P6x8Str,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC OLED_P8x16Str
        FUNCTION OLED_P8x16Str,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC OLED_Set_Pos
        FUNCTION OLED_Set_Pos,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC OLED_WrCmd
        FUNCTION OLED_WrCmd,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC OLED_WrDat
        FUNCTION OLED_WrDat,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC OLED_welcome
        FUNCTION OLED_welcome,021201H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBWEAK _A_P1
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
DelayMS             SYMBOL "DelayMS"
??DelayMS?relay     SYMBOL "?relay", DelayMS
Draw_BMP            SYMBOL "Draw_BMP"
??Draw_BMP?relay    SYMBOL "?relay", Draw_BMP
OLED_CLS            SYMBOL "OLED_CLS"
??OLED_CLS?relay    SYMBOL "?relay", OLED_CLS
OLED_DLY_ms         SYMBOL "OLED_DLY_ms"
??OLED_DLY_ms?relay SYMBOL "?relay", OLED_DLY_ms
OLED_Fill           SYMBOL "OLED_Fill"
??OLED_Fill?relay   SYMBOL "?relay", OLED_Fill
OLED_Init           SYMBOL "OLED_Init"
??OLED_Init?relay   SYMBOL "?relay", OLED_Init
OLED_P16x16Ch       SYMBOL "OLED_P16x16Ch"
??OLED_P16x16Ch?relay SYMBOL "?relay", OLED_P16x16Ch
OLED_P6x8Str        SYMBOL "OLED_P6x8Str"
??OLED_P6x8Str?relay SYMBOL "?relay", OLED_P6x8Str
OLED_P8x16Str       SYMBOL "OLED_P8x16Str"
??OLED_P8x16Str?relay SYMBOL "?relay", OLED_P8x16Str
OLED_Set_Pos        SYMBOL "OLED_Set_Pos"
??OLED_Set_Pos?relay SYMBOL "?relay", OLED_Set_Pos
OLED_WrCmd          SYMBOL "OLED_WrCmd"
??OLED_WrCmd?relay  SYMBOL "?relay", OLED_WrCmd
OLED_WrDat          SYMBOL "OLED_WrDat"
??OLED_WrDat?relay  SYMBOL "?relay", OLED_WrDat
OLED_welcome        SYMBOL "OLED_welcome"
??OLED_welcome?relay SYMBOL "?relay", OLED_welcome

// C:\Users\CNiot\Desktop\20190310A ·À»ð·ÀµÁÏµÍ³\Project\CNiot\DRIVER_API\OLED.c
//    1 #include "OLED.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    2 
//    3 /************************************6*8µÄµãÕó************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//    4 const unsigned char F6x8[][6] =		
F6x8:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 47
        DB 0
        DB 0
        DB 0
        DB 0
        DB 7
        DB 0
        DB 7
        DB 0
        DB 0
        DB 20
        DB 127
        DB 20
        DB 127
        DB 20
        DB 0
        DB 36
        DB 42
        DB 127
        DB 42
        DB 18
        DB 0
        DB 98
        DB 100
        DB 8
        DB 19
        DB 35
        DB 0
        DB 54
        DB 73
        DB 85
        DB 34
        DB 80
        DB 0
        DB 0
        DB 5
        DB 3
        DB 0
        DB 0
        DB 0
        DB 0
        DB 28
        DB 34
        DB 65
        DB 0
        DB 0
        DB 0
        DB 65
        DB 34
        DB 28
        DB 0
        DB 0
        DB 20
        DB 8
        DB 62
        DB 8
        DB 20
        DB 0
        DB 8
        DB 8
        DB 62
        DB 8
        DB 8
        DB 0
        DB 0
        DB 0
        DB 160
        DB 96
        DB 0
        DB 0
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 0
        DB 0
        DB 96
        DB 96
        DB 0
        DB 0
        DB 0
        DB 32
        DB 16
        DB 8
        DB 4
        DB 2
        DB 0
        DB 62
        DB 81
        DB 73
        DB 69
        DB 62
        DB 0
        DB 0
        DB 66
        DB 127
        DB 64
        DB 0
        DB 0
        DB 66
        DB 97
        DB 81
        DB 73
        DB 70
        DB 0
        DB 33
        DB 65
        DB 69
        DB 75
        DB 49
        DB 0
        DB 24
        DB 20
        DB 18
        DB 127
        DB 16
        DB 0
        DB 39
        DB 69
        DB 69
        DB 69
        DB 57
        DB 0
        DB 60
        DB 74
        DB 73
        DB 73
        DB 48
        DB 0
        DB 1
        DB 113
        DB 9
        DB 5
        DB 3
        DB 0
        DB 54
        DB 73
        DB 73
        DB 73
        DB 54
        DB 0
        DB 6
        DB 73
        DB 73
        DB 41
        DB 30
        DB 0
        DB 0
        DB 54
        DB 54
        DB 0
        DB 0
        DB 0
        DB 0
        DB 86
        DB 54
        DB 0
        DB 0
        DB 0
        DB 8
        DB 20
        DB 34
        DB 65
        DB 0
        DB 0
        DB 20
        DB 20
        DB 20
        DB 20
        DB 20
        DB 0
        DB 0
        DB 65
        DB 34
        DB 20
        DB 8
        DB 0
        DB 2
        DB 1
        DB 81
        DB 9
        DB 6
        DB 0
        DB 50
        DB 73
        DB 89
        DB 81
        DB 62
        DB 0
        DB 124
        DB 18
        DB 17
        DB 18
        DB 124
        DB 0
        DB 127
        DB 73
        DB 73
        DB 73
        DB 54
        DB 0
        DB 62
        DB 65
        DB 65
        DB 65
        DB 34
        DB 0
        DB 127
        DB 65
        DB 65
        DB 34
        DB 28
        DB 0
        DB 127
        DB 73
        DB 73
        DB 73
        DB 65
        DB 0
        DB 127
        DB 9
        DB 9
        DB 9
        DB 1
        DB 0
        DB 62
        DB 65
        DB 73
        DB 73
        DB 122
        DB 0
        DB 127
        DB 8
        DB 8
        DB 8
        DB 127
        DB 0
        DB 0
        DB 65
        DB 127
        DB 65
        DB 0
        DB 0
        DB 32
        DB 64
        DB 65
        DB 63
        DB 1
        DB 0
        DB 127
        DB 8
        DB 20
        DB 34
        DB 65
        DB 0
        DB 127
        DB 64
        DB 64
        DB 64
        DB 64
        DB 0
        DB 127
        DB 2
        DB 12
        DB 2
        DB 127
        DB 0
        DB 127
        DB 4
        DB 8
        DB 16
        DB 127
        DB 0
        DB 62
        DB 65
        DB 65
        DB 65
        DB 62
        DB 0
        DB 127
        DB 9
        DB 9
        DB 9
        DB 6
        DB 0
        DB 62
        DB 65
        DB 81
        DB 33
        DB 94
        DB 0
        DB 127
        DB 9
        DB 25
        DB 41
        DB 70
        DB 0
        DB 70
        DB 73
        DB 73
        DB 73
        DB 49
        DB 0
        DB 1
        DB 1
        DB 127
        DB 1
        DB 1
        DB 0
        DB 63
        DB 64
        DB 64
        DB 64
        DB 63
        DB 0
        DB 31
        DB 32
        DB 64
        DB 32
        DB 31
        DB 0
        DB 63
        DB 64
        DB 56
        DB 64
        DB 63
        DB 0
        DB 99
        DB 20
        DB 8
        DB 20
        DB 99
        DB 0
        DB 7
        DB 8
        DB 112
        DB 8
        DB 7
        DB 0
        DB 97
        DB 81
        DB 73
        DB 69
        DB 67
        DB 0
        DB 0
        DB 127
        DB 65
        DB 65
        DB 0
        DB 0
        DB 85
        DB 42
        DB 85
        DB 42
        DB 85
        DB 0
        DB 0
        DB 65
        DB 65
        DB 127
        DB 0
        DB 0
        DB 4
        DB 2
        DB 1
        DB 2
        DB 4
        DB 0
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 0
        DB 0
        DB 1
        DB 2
        DB 4
        DB 0
        DB 0
        DB 32
        DB 84
        DB 84
        DB 84
        DB 120
        DB 0
        DB 127
        DB 72
        DB 68
        DB 68
        DB 56
        DB 0
        DB 56
        DB 68
        DB 68
        DB 68
        DB 32
        DB 0
        DB 56
        DB 68
        DB 68
        DB 72
        DB 127
        DB 0
        DB 56
        DB 84
        DB 84
        DB 84
        DB 24
        DB 0
        DB 8
        DB 126
        DB 9
        DB 1
        DB 2
        DB 0
        DB 24
        DB 164
        DB 164
        DB 164
        DB 124
        DB 0
        DB 127
        DB 8
        DB 4
        DB 4
        DB 120
        DB 0
        DB 0
        DB 68
        DB 125
        DB 64
        DB 0
        DB 0
        DB 64
        DB 128
        DB 132
        DB 125
        DB 0
        DB 0
        DB 127
        DB 16
        DB 40
        DB 68
        DB 0
        DB 0
        DB 0
        DB 65
        DB 127
        DB 64
        DB 0
        DB 0
        DB 124
        DB 4
        DB 24
        DB 4
        DB 120
        DB 0
        DB 124
        DB 8
        DB 4
        DB 4
        DB 120
        DB 0
        DB 56
        DB 68
        DB 68
        DB 68
        DB 56
        DB 0
        DB 252
        DB 36
        DB 36
        DB 36
        DB 24
        DB 0
        DB 24
        DB 36
        DB 36
        DB 24
        DB 252
        DB 0
        DB 124
        DB 8
        DB 4
        DB 4
        DB 8
        DB 0
        DB 72
        DB 84
        DB 84
        DB 84
        DB 32
        DB 0
        DB 4
        DB 63
        DB 68
        DB 64
        DB 32
        DB 0
        DB 60
        DB 64
        DB 64
        DB 32
        DB 124
        DB 0
        DB 28
        DB 32
        DB 64
        DB 32
        DB 28
        DB 0
        DB 60
        DB 64
        DB 48
        DB 64
        DB 60
        DB 0
        DB 68
        DB 40
        DB 16
        DB 40
        DB 68
        DB 0
        DB 28
        DB 160
        DB 160
        DB 160
        DB 124
        DB 0
        DB 68
        DB 100
        DB 84
        DB 76
        DB 68
        DB 20
        DB 20
        DB 20
        DB 20
        DB 20
        DB 20
//    5 {
//    6 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,// sp
//    7 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00,// !
//    8 0x00, 0x00, 0x07, 0x00, 0x07, 0x00,// "
//    9 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14,// #
//   10 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12,// $
//   11 0x00, 0x62, 0x64, 0x08, 0x13, 0x23,// %
//   12 0x00, 0x36, 0x49, 0x55, 0x22, 0x50,// &
//   13 0x00, 0x00, 0x05, 0x03, 0x00, 0x00,// '
//   14 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00,// (
//   15 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00,// )
//   16 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14,// *
//   17 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08,// +
//   18 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00,// ,
//   19 0x00, 0x08, 0x08, 0x08, 0x08, 0x08,// -
//   20 0x00, 0x00, 0x60, 0x60, 0x00, 0x00,// .
//   21 0x00, 0x20, 0x10, 0x08, 0x04, 0x02,// /
//   22 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
//   23 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00,// 1
//   24 0x00, 0x42, 0x61, 0x51, 0x49, 0x46,// 2
//   25 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31,// 3
//   26 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10,// 4
//   27 0x00, 0x27, 0x45, 0x45, 0x45, 0x39,// 5
//   28 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
//   29 0x00, 0x01, 0x71, 0x09, 0x05, 0x03,// 7
//   30 0x00, 0x36, 0x49, 0x49, 0x49, 0x36,// 8
//   31 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E,// 9
//   32 0x00, 0x00, 0x36, 0x36, 0x00, 0x00,// :
//   33 0x00, 0x00, 0x56, 0x36, 0x00, 0x00,// ;
//   34 0x00, 0x08, 0x14, 0x22, 0x41, 0x00,// <
//   35 0x00, 0x14, 0x14, 0x14, 0x14, 0x14,// =
//   36 0x00, 0x00, 0x41, 0x22, 0x14, 0x08,// >
//   37 0x00, 0x02, 0x01, 0x51, 0x09, 0x06,// ?
//   38 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E,// @
//   39 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C,// A
//   40 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36,// B
//   41 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22,// C
//   42 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C,// D
//   43 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41,// E
//   44 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01,// F
//   45 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A,// G
//   46 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F,// H
//   47 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00,// I
//   48 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01,// J
//   49 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41,// K
//   50 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40,// L
//   51 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F,// M
//   52 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F,// N
//   53 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E,// O
//   54 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06,// P
//   55 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
//   56 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46,// R
//   57 0x00, 0x46, 0x49, 0x49, 0x49, 0x31,// S
//   58 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01,// T
//   59 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F,// U
//   60 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F,// V
//   61 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F,// W
//   62 0x00, 0x63, 0x14, 0x08, 0x14, 0x63,// X
//   63 0x00, 0x07, 0x08, 0x70, 0x08, 0x07,// Y
//   64 0x00, 0x61, 0x51, 0x49, 0x45, 0x43,// Z
//   65 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00,// [
//   66 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55,// 55
//   67 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00,// ]
//   68 0x00, 0x04, 0x02, 0x01, 0x02, 0x04,// ^
//   69 0x00, 0x40, 0x40, 0x40, 0x40, 0x40,// _
//   70 0x00, 0x00, 0x01, 0x02, 0x04, 0x00,// '
//   71 0x00, 0x20, 0x54, 0x54, 0x54, 0x78,// a
//   72 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38,// b
//   73 0x00, 0x38, 0x44, 0x44, 0x44, 0x20,// c
//   74 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F,// d
//   75 0x00, 0x38, 0x54, 0x54, 0x54, 0x18,// e
//   76 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02,// f
//   77 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C,// g
//   78 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78,// h
//   79 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00,// i
//   80 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00,// j
//   81 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00,// k
//   82 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00,// l
//   83 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78,// m
//   84 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78,// n
//   85 0x00, 0x38, 0x44, 0x44, 0x44, 0x38,// o
//   86 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18,// p
//   87 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC,// q
//   88 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08,// r
//   89 0x00, 0x48, 0x54, 0x54, 0x54, 0x20,// s
//   90 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20,// t
//   91 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C,// u
//   92 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C,// v
//   93 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C,// w
//   94 0x00, 0x44, 0x28, 0x10, 0x28, 0x44,// x
//   95 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C,// y
//   96 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44,// z
//   97 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,// horiz lines
//   98 };
//   99 /****************************************8*16µÄµãÕó************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  100 const unsigned char F8X16[]=	  
F8X16:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 248
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 51
        DB 48
        DB 0
        DB 0
        DB 0
        DB 0
        DB 16
        DB 12
        DB 6
        DB 16
        DB 12
        DB 6
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 192
        DB 120
        DB 64
        DB 192
        DB 120
        DB 64
        DB 0
        DB 4
        DB 63
        DB 4
        DB 4
        DB 63
        DB 4
        DB 4
        DB 0
        DB 0
        DB 112
        DB 136
        DB 252
        DB 8
        DB 48
        DB 0
        DB 0
        DB 0
        DB 24
        DB 32
        DB 255
        DB 33
        DB 30
        DB 0
        DB 0
        DB 240
        DB 8
        DB 240
        DB 0
        DB 224
        DB 24
        DB 0
        DB 0
        DB 0
        DB 33
        DB 28
        DB 3
        DB 30
        DB 33
        DB 30
        DB 0
        DB 0
        DB 240
        DB 8
        DB 136
        DB 112
        DB 0
        DB 0
        DB 0
        DB 30
        DB 33
        DB 35
        DB 36
        DB 25
        DB 39
        DB 33
        DB 16
        DB 16
        DB 22
        DB 14
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 224
        DB 24
        DB 4
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 7
        DB 24
        DB 32
        DB 64
        DB 0
        DB 0
        DB 2
        DB 4
        DB 24
        DB 224
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 32
        DB 24
        DB 7
        DB 0
        DB 0
        DB 0
        DB 64
        DB 64
        DB 128
        DB 240
        DB 128
        DB 64
        DB 64
        DB 0
        DB 2
        DB 2
        DB 1
        DB 15
        DB 1
        DB 2
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 240
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 1
        DB 1
        DB 31
        DB 1
        DB 1
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 176
        DB 112
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 1
        DB 1
        DB 1
        DB 1
        DB 1
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 48
        DB 48
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 96
        DB 24
        DB 4
        DB 0
        DB 96
        DB 24
        DB 6
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 224
        DB 16
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 0
        DB 15
        DB 16
        DB 32
        DB 32
        DB 16
        DB 15
        DB 0
        DB 0
        DB 16
        DB 16
        DB 248
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 0
        DB 112
        DB 8
        DB 8
        DB 8
        DB 136
        DB 112
        DB 0
        DB 0
        DB 48
        DB 40
        DB 36
        DB 34
        DB 33
        DB 48
        DB 0
        DB 0
        DB 48
        DB 8
        DB 136
        DB 136
        DB 72
        DB 48
        DB 0
        DB 0
        DB 24
        DB 32
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 0
        DB 192
        DB 32
        DB 16
        DB 248
        DB 0
        DB 0
        DB 0
        DB 7
        DB 4
        DB 36
        DB 36
        DB 63
        DB 36
        DB 0
        DB 0
        DB 248
        DB 8
        DB 136
        DB 136
        DB 8
        DB 8
        DB 0
        DB 0
        DB 25
        DB 33
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 224
        DB 16
        DB 136
        DB 136
        DB 24
        DB 0
        DB 0
        DB 0
        DB 15
        DB 17
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 56
        DB 8
        DB 8
        DB 200
        DB 56
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 112
        DB 136
        DB 8
        DB 8
        DB 136
        DB 112
        DB 0
        DB 0
        DB 28
        DB 34
        DB 33
        DB 33
        DB 34
        DB 28
        DB 0
        DB 0
        DB 224
        DB 16
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 0
        DB 0
        DB 49
        DB 34
        DB 34
        DB 17
        DB 15
        DB 0
        DB 0
        DB 0
        DB 0
        DB 192
        DB 192
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 48
        DB 48
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 96
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 64
        DB 32
        DB 16
        DB 8
        DB 0
        DB 0
        DB 1
        DB 2
        DB 4
        DB 8
        DB 16
        DB 32
        DB 0
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 0
        DB 4
        DB 4
        DB 4
        DB 4
        DB 4
        DB 4
        DB 4
        DB 0
        DB 0
        DB 8
        DB 16
        DB 32
        DB 64
        DB 128
        DB 0
        DB 0
        DB 0
        DB 32
        DB 16
        DB 8
        DB 4
        DB 2
        DB 1
        DB 0
        DB 0
        DB 112
        DB 72
        DB 8
        DB 8
        DB 8
        DB 240
        DB 0
        DB 0
        DB 0
        DB 0
        DB 48
        DB 54
        DB 1
        DB 0
        DB 0
        DB 192
        DB 48
        DB 200
        DB 40
        DB 232
        DB 16
        DB 224
        DB 0
        DB 7
        DB 24
        DB 39
        DB 36
        DB 35
        DB 20
        DB 11
        DB 0
        DB 0
        DB 0
        DB 192
        DB 56
        DB 224
        DB 0
        DB 0
        DB 0
        DB 32
        DB 60
        DB 35
        DB 2
        DB 2
        DB 39
        DB 56
        DB 32
        DB 8
        DB 248
        DB 136
        DB 136
        DB 136
        DB 112
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 192
        DB 48
        DB 8
        DB 8
        DB 8
        DB 8
        DB 56
        DB 0
        DB 7
        DB 24
        DB 32
        DB 32
        DB 32
        DB 16
        DB 8
        DB 0
        DB 8
        DB 248
        DB 8
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 32
        DB 63
        DB 32
        DB 32
        DB 32
        DB 16
        DB 15
        DB 0
        DB 8
        DB 248
        DB 136
        DB 136
        DB 232
        DB 8
        DB 16
        DB 0
        DB 32
        DB 63
        DB 32
        DB 32
        DB 35
        DB 32
        DB 24
        DB 0
        DB 8
        DB 248
        DB 136
        DB 136
        DB 232
        DB 8
        DB 16
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 192
        DB 48
        DB 8
        DB 8
        DB 8
        DB 56
        DB 0
        DB 0
        DB 7
        DB 24
        DB 32
        DB 32
        DB 34
        DB 30
        DB 2
        DB 0
        DB 8
        DB 248
        DB 8
        DB 0
        DB 0
        DB 8
        DB 248
        DB 8
        DB 32
        DB 63
        DB 33
        DB 1
        DB 1
        DB 33
        DB 63
        DB 32
        DB 0
        DB 8
        DB 8
        DB 248
        DB 8
        DB 8
        DB 0
        DB 0
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 0
        DB 0
        DB 8
        DB 8
        DB 248
        DB 8
        DB 8
        DB 0
        DB 192
        DB 128
        DB 128
        DB 128
        DB 127
        DB 0
        DB 0
        DB 0
        DB 8
        DB 248
        DB 136
        DB 192
        DB 40
        DB 24
        DB 8
        DB 0
        DB 32
        DB 63
        DB 32
        DB 1
        DB 38
        DB 56
        DB 32
        DB 0
        DB 8
        DB 248
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 32
        DB 32
        DB 32
        DB 48
        DB 0
        DB 8
        DB 248
        DB 248
        DB 0
        DB 248
        DB 248
        DB 8
        DB 0
        DB 32
        DB 63
        DB 0
        DB 63
        DB 0
        DB 63
        DB 32
        DB 0
        DB 8
        DB 248
        DB 48
        DB 192
        DB 0
        DB 8
        DB 248
        DB 8
        DB 32
        DB 63
        DB 32
        DB 0
        DB 7
        DB 24
        DB 63
        DB 0
        DB 224
        DB 16
        DB 8
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 15
        DB 16
        DB 32
        DB 32
        DB 32
        DB 16
        DB 15
        DB 0
        DB 8
        DB 248
        DB 8
        DB 8
        DB 8
        DB 8
        DB 240
        DB 0
        DB 32
        DB 63
        DB 33
        DB 1
        DB 1
        DB 1
        DB 0
        DB 0
        DB 224
        DB 16
        DB 8
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 15
        DB 24
        DB 36
        DB 36
        DB 56
        DB 80
        DB 79
        DB 0
        DB 8
        DB 248
        DB 136
        DB 136
        DB 136
        DB 136
        DB 112
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 3
        DB 12
        DB 48
        DB 32
        DB 0
        DB 112
        DB 136
        DB 8
        DB 8
        DB 8
        DB 56
        DB 0
        DB 0
        DB 56
        DB 32
        DB 33
        DB 33
        DB 34
        DB 28
        DB 0
        DB 24
        DB 8
        DB 8
        DB 248
        DB 8
        DB 8
        DB 24
        DB 0
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 0
        DB 0
        DB 8
        DB 248
        DB 8
        DB 0
        DB 0
        DB 8
        DB 248
        DB 8
        DB 0
        DB 31
        DB 32
        DB 32
        DB 32
        DB 32
        DB 31
        DB 0
        DB 8
        DB 120
        DB 136
        DB 0
        DB 0
        DB 200
        DB 56
        DB 8
        DB 0
        DB 0
        DB 7
        DB 56
        DB 14
        DB 1
        DB 0
        DB 0
        DB 248
        DB 8
        DB 0
        DB 248
        DB 0
        DB 8
        DB 248
        DB 0
        DB 3
        DB 60
        DB 7
        DB 0
        DB 7
        DB 60
        DB 3
        DB 0
        DB 8
        DB 24
        DB 104
        DB 128
        DB 128
        DB 104
        DB 24
        DB 8
        DB 32
        DB 48
        DB 44
        DB 3
        DB 3
        DB 44
        DB 48
        DB 32
        DB 8
        DB 56
        DB 200
        DB 0
        DB 200
        DB 56
        DB 8
        DB 0
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 0
        DB 0
        DB 16
        DB 8
        DB 8
        DB 8
        DB 200
        DB 56
        DB 8
        DB 0
        DB 32
        DB 56
        DB 38
        DB 33
        DB 32
        DB 32
        DB 24
        DB 0
        DB 0
        DB 0
        DB 0
        DB 254
        DB 2
        DB 2
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 127
        DB 64
        DB 64
        DB 64
        DB 0
        DB 0
        DB 12
        DB 48
        DB 192
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 6
        DB 56
        DB 192
        DB 0
        DB 0
        DB 2
        DB 2
        DB 2
        DB 254
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 64
        DB 64
        DB 127
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 4
        DB 2
        DB 2
        DB 2
        DB 4
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 2
        DB 2
        DB 4
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 25
        DB 36
        DB 34
        DB 34
        DB 34
        DB 63
        DB 32
        DB 8
        DB 248
        DB 0
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 17
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 14
        DB 17
        DB 32
        DB 32
        DB 32
        DB 17
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 136
        DB 248
        DB 0
        DB 0
        DB 14
        DB 17
        DB 32
        DB 32
        DB 16
        DB 63
        DB 32
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 31
        DB 34
        DB 34
        DB 34
        DB 34
        DB 19
        DB 0
        DB 0
        DB 128
        DB 128
        DB 240
        DB 136
        DB 136
        DB 136
        DB 24
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 107
        DB 148
        DB 148
        DB 148
        DB 147
        DB 96
        DB 0
        DB 8
        DB 248
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 32
        DB 63
        DB 33
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 128
        DB 152
        DB 152
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 152
        DB 152
        DB 0
        DB 0
        DB 0
        DB 192
        DB 128
        DB 128
        DB 128
        DB 127
        DB 0
        DB 0
        DB 8
        DB 248
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 32
        DB 63
        DB 36
        DB 2
        DB 45
        DB 48
        DB 32
        DB 0
        DB 0
        DB 8
        DB 8
        DB 248
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 63
        DB 32
        DB 0
        DB 63
        DB 128
        DB 128
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 32
        DB 63
        DB 33
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 31
        DB 32
        DB 32
        DB 32
        DB 32
        DB 31
        DB 0
        DB 128
        DB 128
        DB 0
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 128
        DB 255
        DB 161
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 14
        DB 17
        DB 32
        DB 32
        DB 160
        DB 255
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 32
        DB 32
        DB 63
        DB 33
        DB 32
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 51
        DB 36
        DB 36
        DB 36
        DB 36
        DB 25
        DB 0
        DB 0
        DB 128
        DB 128
        DB 224
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 31
        DB 32
        DB 32
        DB 0
        DB 0
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 0
        DB 0
        DB 31
        DB 32
        DB 32
        DB 32
        DB 16
        DB 63
        DB 32
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 1
        DB 14
        DB 48
        DB 8
        DB 6
        DB 1
        DB 0
        DB 128
        DB 128
        DB 0
        DB 128
        DB 0
        DB 128
        DB 128
        DB 128
        DB 15
        DB 48
        DB 12
        DB 3
        DB 12
        DB 48
        DB 15
        DB 0
        DB 0
        DB 128
        DB 128
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 32
        DB 49
        DB 46
        DB 14
        DB 49
        DB 32
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 129
        DB 142
        DB 112
        DB 24
        DB 6
        DB 1
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 33
        DB 48
        DB 44
        DB 34
        DB 33
        DB 48
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 124
        DB 2
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 64
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 2
        DB 2
        DB 124
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 64
        DB 63
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 6
        DB 1
        DB 1
        DB 2
        DB 2
        DB 4
        DB 4
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
//  101 {
//  102   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  103   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//! 1
//  104   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//" 2
//  105   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//# 3
//  106   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$ 4
//  107   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//% 5
//  108   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//& 6
//  109   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//' 7
//  110   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//( 8
//  111   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//) 9
//  112   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//* 10
//  113   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+ 11
//  114   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//, 12
//  115   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//- 13
//  116   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//. 14
//  117   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,/// 15
//  118   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//0 16
//  119   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//1 17
//  120   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//2 18
//  121   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//3 19
//  122   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//4 20
//  123   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//5 21
//  124   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//6 22
//  125   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//7 23
//  126   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//8 24
//  127   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//9 25
//  128   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//: 26
//  129   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//; 27
//  130   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//< 28
//  131   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//= 29
//  132   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//> 30
//  133   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//? 31
//  134   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@ 32
//  135   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A 33
//  136   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B 34
//  137   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C 35
//  138   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D 36
//  139   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E 37
//  140   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F 38
//  141   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G 39
//  142   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H 40
//  143   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I 41
//  144   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J 42
//  145   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K 43
//  146   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L 44
//  147   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M 45
//  148   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N 46
//  149   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O 47
//  150   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P 48
//  151   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q 49
//  152   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R 50
//  153   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S 51
//  154   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T 52
//  155   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U 53
//  156   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V 54
//  157   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W 55
//  158   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X 56
//  159   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y 57
//  160   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z 58
//  161   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[ 59
//  162   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\ 60
//  163   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//] 61
//  164   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^ 62
//  165   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_ 63
//  166   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//` 64
//  167   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a 65
//  168   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b 66
//  169   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c 67
//  170   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d 68
//  171   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e 69
//  172   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f 70
//  173   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g 71
//  174   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h 72
//  175   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i 73
//  176   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j 74
//  177   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k 75
//  178   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l 76
//  179   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m 77
//  180   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n 78
//  181   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o 79
//  182   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p 80
//  183   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q 81
//  184   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r 82
//  185   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s 83
//  186   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t 84
//  187   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u 85
//  188   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v 86
//  189   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w 87
//  190   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x 88
//  191   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y 89
//  192   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z 90
//  193   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{ 91
//  194   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//| 92
//  195   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//} 93
//  196   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~ 94
//  197 };
//  198 
//  199 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  200 void DelayMS(unsigned int msec)
DelayMS:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function DelayMS
        CODE
//  201 { 
        ; Saved register size: 0
        ; Auto size: 0
//  202     unsigned int i,j;
//  203     
//  204     for (i=0; i<msec; i++)
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??DelayMS_0
//  205         for (j=0; j<530; j++);
??DelayMS_1:
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??DelayMS_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??DelayMS_1
//  206 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//  207 
//  208 /*********************OLED ÑÓÊ±1ms************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  209 void OLED_DLY_ms(unsigned int ms)
OLED_DLY_ms:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function OLED_DLY_ms
        CODE
//  210 {                         
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??OLED_DLY_ms_0
//  211     unsigned int a;
//  212     while(ms)
//  213     {
//  214         a=1800;
??OLED_DLY_ms_1:
        MOV     R0,#0x8
        MOV     R1,#0x7
//  215         while(a--);
??OLED_DLY_ms_2:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R4
        ORL     A,R5
        JNZ     ??OLED_DLY_ms_2
//  216         ms--;
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
//  217     }
??OLED_DLY_ms_0:
        MOV     A,R2
        ORL     A,R3
        JNZ     ??OLED_DLY_ms_1
//  218     return;
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  219 }
//  220 /*********************OLEDÐ´Êý¾Ý************************************/ 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  221 void OLED_WrDat(unsigned char dat)     
OLED_WrDat:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function OLED_WrDat
        CODE
//  222 {
        ; Saved register size: 0
        ; Auto size: 0
//  223     unsigned char i=8, temp=0;
//  224     OLED_DC=1;  
        SETB    0x90.6
//  225     for(i=0;i<8;i++) //·¢ËÍÒ»¸ö°ËÎ»Êý¾Ý 
        MOV     R0,#0x8
//  226     {
//  227         OLED_SCL=0;  
??OLED_WrDat_0:
        CLR     0x90.2
//  228         
//  229         temp = dat&0x80;
//  230         if (temp == 0)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JC      ??OLED_WrDat_1
//  231         {
//  232             OLED_SDA = 0;
        CLR     0x90.3
        SJMP    ??OLED_WrDat_2
//  233         }
//  234         else
//  235         {
//  236             OLED_SDA = 1;
??OLED_WrDat_1:
        SETB    0x90.3
//  237         }
//  238         OLED_SCL=1;             
??OLED_WrDat_2:
        SETB    0x90.2
//  239         dat<<=1;    
        CLR     C
        RLC     A
        MOV     R1,A
//  240     }
        DEC     R0
        MOV     A,R0
        JNZ     ??OLED_WrDat_0
//  241 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
        REQUIRE _A_P1
//  242 /*********************OLEDÐ´ÃüÁî************************************/                                        

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  243 void OLED_WrCmd(unsigned char cmd)
OLED_WrCmd:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function OLED_WrCmd
        CODE
//  244 {
        ; Saved register size: 0
        ; Auto size: 0
//  245     unsigned char i=8, temp=0;
//  246     OLED_DC=0;
        CLR     0x90.6
//  247     for(i=0;i<8;i++) //·¢ËÍÒ»¸ö°ËÎ»Êý¾Ý 
        MOV     R0,#0x8
//  248     { 
//  249         OLED_SCL=0; 
??OLED_WrCmd_0:
        CLR     0x90.2
//  250        
//  251         temp = cmd&0x80;
//  252         if (temp == 0)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JC      ??OLED_WrCmd_1
//  253         {
//  254             OLED_SDA = 0;
        CLR     0x90.3
        SJMP    ??OLED_WrCmd_2
//  255         }
//  256         else
//  257         {
//  258             OLED_SDA = 1;
??OLED_WrCmd_1:
        SETB    0x90.3
//  259         }
//  260         OLED_SCL=1;
??OLED_WrCmd_2:
        SETB    0x90.2
//  261         cmd<<=1;;        
        CLR     C
        RLC     A
        MOV     R1,A
//  262     }     
        DEC     R0
        MOV     A,R0
        JNZ     ??OLED_WrCmd_0
//  263 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
        REQUIRE _A_P1
//  264 /*********************OLED ÉèÖÃ×ø±ê************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  265 void OLED_Set_Pos(unsigned char x, unsigned char y) 
OLED_Set_Pos:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function OLED_Set_Pos
        CODE
//  266 { 
        FUNCALL OLED_Set_Pos, OLED_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Set_Pos, OLED_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Set_Pos, OLED_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  267     OLED_WrCmd(0xb0+y);
        ; Setup parameters for call to function OLED_WrCmd
        MOV     A,#-0x50
        ADD     A,R7
        MOV     R1,A
        LCALL   ??OLED_WrCmd?relay
//  268     OLED_WrCmd(((x&0xf0)>>4)|0x10);
        ; Setup parameters for call to function OLED_WrCmd
        MOV     A,R6
        SWAP    A
        ANL     A,#0xf
        ORL     A,#0x10
        MOV     R1,A
        LCALL   ??OLED_WrCmd?relay
//  269     OLED_WrCmd((x&0x0f)|0x01); 
        ; Setup parameters for call to function OLED_WrCmd
        MOV     A,#0xf
        ANL     A,R6
        ORL     A,#0x1
        MOV     R1,A
        LCALL   ??OLED_WrCmd?relay
        CFI EndBlock cfiBlock4
//  270 } 
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  271 /*********************OLEDÈ«ÆÁ************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  272 void OLED_Fill(unsigned char bmp_dat) 
OLED_Fill:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function OLED_Fill
        CODE
//  273 {
        FUNCALL OLED_Fill, OLED_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Fill, OLED_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Fill, OLED_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Fill, OLED_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  274     unsigned char y,x;
//  275     for(y=0;y<8;y++)
        MOV     ?V0 + 0,#0x0
//  276     {
//  277         OLED_WrCmd(0xb0+y);
??OLED_Fill_0:
        ; Setup parameters for call to function OLED_WrCmd
        MOV     A,#-0x50
        ADD     A,?V0 + 0
        LCALL   ?Subroutine6 & 0xFFFF
//  278         OLED_WrCmd(0x01);
//  279         OLED_WrCmd(0x10);
//  280         for(x=0;x<X_WIDTH;x++)
??CrossCallReturnLabel_4:
        MOV     R7,#-0x80
//  281             OLED_WrDat(bmp_dat);
??OLED_Fill_1:
        ; Setup parameters for call to function OLED_WrDat
        MOV     A,R6
        MOV     R1,A
        LCALL   ??OLED_WrDat?relay
        DEC     R7
        MOV     A,R7
        JNZ     ??OLED_Fill_1
//  282     }
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x8
        JC      ??OLED_Fill_0
//  283 }
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock6
//  284 /*********************OLED¸´Î»************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  285 void OLED_CLS(void)
OLED_CLS:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function OLED_CLS
        CODE
//  286 {
        FUNCALL OLED_CLS, OLED_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_CLS, OLED_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_CLS, OLED_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_CLS, OLED_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  287     unsigned char y,x;    
//  288     for(y=0;y<8;y++)
        MOV     R7,#0x0
//  289     {
//  290         OLED_WrCmd(0xb0+y);
??OLED_CLS_0:
        ; Setup parameters for call to function OLED_WrCmd
        MOV     A,#-0x50
        ADD     A,R7
        LCALL   ?Subroutine6 & 0xFFFF
//  291         OLED_WrCmd(0x01);
//  292         OLED_WrCmd(0x10); 
//  293         for(x=0;x<X_WIDTH;x++)
??CrossCallReturnLabel_5:
        MOV     R6,#-0x80
//  294             OLED_WrDat(0);
??OLED_CLS_1:
        ; Setup parameters for call to function OLED_WrDat
        MOV     R1,#0x0
        LCALL   ??OLED_WrDat?relay
        DEC     R6
        MOV     A,R6
        JNZ     ??OLED_CLS_1
//  295     }
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0x8
        JC      ??OLED_CLS_0
//  296 }
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV     R1,A
        LCALL   ??OLED_WrCmd?relay
        ; Setup parameters for call to function OLED_WrCmd
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#0x1
        LCALL   ??OLED_WrCmd?relay
        ; Setup parameters for call to function OLED_WrCmd
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#0x10
        LCALL   ??OLED_WrCmd?relay
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10
//  297 /*********************OLED³õÊ¼»¯************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  298 void OLED_Init(void)     
OLED_Init:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function OLED_Init
        CODE
//  299 {  
        FUNCALL OLED_Init, OLED_DLY_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_Fill
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_Init, OLED_Set_Pos
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  300     
//  301 
//  302     P1SEL &= 0x33; //ÈÃ P1.2 P1.3 P1.6 P1.7ÎªÆÕÍ¨IO¿Ú
        ANL     0xf4,#0x33
//  303     P1DIR |= 0xCC; //°Ñ P1.2 P1.3 1.6 1.7ÉèÖÃÎªÊä³ö
        ORL     0xfe,#0xcc
//  304     
//  305     OLED_SCL=1;
        SETB    0x90.2
//  306     OLED_RST=0;
        CLR     0x90.7
//  307     OLED_DLY_ms(50);
        ; Setup parameters for call to function OLED_DLY_ms
        MOV     R2,#0x32
        MOV     R3,#0x0
        LCALL   ??OLED_DLY_ms?relay
//  308     OLED_RST=1;      //´ÓÉÏµçµ½ÏÂÃæ¿ªÊ¼³õÊ¼»¯ÒªÓÐ×ã¹»µÄÊ±¼ä£¬¼´µÈ´ýRC¸´Î»Íê±Ï   
        SETB    0x90.7
//  309     OLED_WrCmd(0xae);//--turn off oled panel
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x52
        LCALL   ?Subroutine7 & 0xFFFF
//  310     OLED_WrCmd(0x00);//---set low column address
//  311     OLED_WrCmd(0x10);//---set high column address
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#0x10
        LCALL   ?Subroutine8 & 0xFFFF
//  312     OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
//  313     OLED_WrCmd(0x81);//--set contrast control register
??CrossCallReturnLabel_8:
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x7f
        LCALL   ??OLED_WrCmd?relay
//  314     OLED_WrCmd(0xcf); // Set SEG Output Current Brightness
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x31
        LCALL   ??OLED_WrCmd?relay
//  315     OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0×óÓÒ·´ÖÃ 0xa1Õý³£
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x5f
        LCALL   ??OLED_WrCmd?relay
//  316     OLED_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0ÉÏÏÂ·´ÖÃ 0xc8Õý³£
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x38
        LCALL   ?Subroutine9 & 0xFFFF
//  317     OLED_WrCmd(0xa6);//--set normal display
//  318     OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x58
        LCALL   ??OLED_WrCmd?relay
//  319     OLED_WrCmd(0x3f);//--1/64 duty
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#0x3f
        LCALL   ??OLED_WrCmd?relay
//  320     OLED_WrCmd(0xd3);//-set display offset    Shift Mapping RAM Counter (0x00~0x3F)
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x2d
        LCALL   ?Subroutine7 & 0xFFFF
//  321     OLED_WrCmd(0x00);//-not offset
//  322     OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
??CrossCallReturnLabel_7:
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x2b
        LCALL   ??OLED_WrCmd?relay
//  323     OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x80
        LCALL   ??OLED_WrCmd?relay
//  324     OLED_WrCmd(0xd9);//--set pre-charge period
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x27
        LCALL   ??OLED_WrCmd?relay
//  325     OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0xf
        LCALL   ??OLED_WrCmd?relay
//  326     OLED_WrCmd(0xda);//--set com pins hardware configuration
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x26
        LCALL   ??OLED_WrCmd?relay
//  327     OLED_WrCmd(0x12);
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#0x12
        LCALL   ??OLED_WrCmd?relay
//  328     OLED_WrCmd(0xdb);//--set vcomh
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x25
        LCALL   ?Subroutine8 & 0xFFFF
//  329     OLED_WrCmd(0x40);//Set VCOM Deselect Level
//  330     OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
??CrossCallReturnLabel_9:
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#0x20
        LCALL   ??OLED_WrCmd?relay
//  331     OLED_WrCmd(0x02);//
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#0x2
        LCALL   ??OLED_WrCmd?relay
//  332     OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x73
        LCALL   ??OLED_WrCmd?relay
//  333     OLED_WrCmd(0x14);//--set(0x10) disable
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#0x14
        LCALL   ??OLED_WrCmd?relay
//  334     OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x5c
        LCALL   ?Subroutine9 & 0xFFFF
//  335     OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
//  336     OLED_WrCmd(0xaf);//--turn on oled panel
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x51
        LCALL   ??OLED_WrCmd?relay
//  337     OLED_Fill(0xff);  //³õÊ¼ÇåÆÁ
        ; Setup parameters for call to function OLED_Fill
        MOV     R1,#-0x1
        LCALL   ??OLED_Fill?relay
//  338     OLED_Set_Pos(0,0);     
        ; Setup parameters for call to function OLED_Set_Pos
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??OLED_Set_Pos?relay
        CFI EndBlock cfiBlock11
//  339 } 
        REQUIRE ?Subroutine0
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond14) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond14) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond14) CFA_SP SP+-5
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        LCALL   ??OLED_WrCmd?relay
        ; Setup parameters for call to function OLED_WrCmd
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#-0x5a
        LCALL   ??OLED_WrCmd?relay
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond17) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond17) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond17) CFA_SP SP+-5
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        LCALL   ??OLED_WrCmd?relay
        ; Setup parameters for call to function OLED_WrCmd
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#0x40
        LCALL   ??OLED_WrCmd?relay
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond20) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond20) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond20) CFA_SP SP+-5
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        LCALL   ??OLED_WrCmd?relay
        ; Setup parameters for call to function OLED_WrCmd
        ; Setup parameters for call to function OLED_WrCmd
        MOV     R1,#0x0
        LCALL   ??OLED_WrCmd?relay
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21
//  340 /***************¹¦ÄÜÃèÊö£ºÏÔÊ¾6*8Ò»×é±ê×¼ASCII×Ö·û´®    ÏÔÊ¾µÄ×ø±ê£¨x,y£©£¬yÎªÒ³·¶Î§0¡«7****************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  341 void OLED_P6x8Str(unsigned char x, unsigned char y,unsigned char ch[])
OLED_P6x8Str:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function OLED_P6x8Str
        CODE
//  342 {
        FUNCALL OLED_P6x8Str, OLED_Set_Pos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_P6x8Str, OLED_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  343     unsigned char c=0,i=0,j=0;      
        MOV     ?V0 + 4,#0x0
        SJMP    ??OLED_P6x8Str_0
//  344     while (ch[j]!='\0')
//  345     {    
//  346         c =ch[j]-32;
??OLED_P6x8Str_1:
        ADD     A,#-0x20
        MOV     ?V0 + 6,A
//  347         if(x>126){x=0;y++;}
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x7f
        JC      ??OLED_P6x8Str_2
        MOV     ?V0 + 0,#0x0
        INC     ?V0 + 1
//  348         OLED_Set_Pos(x,y);    
??OLED_P6x8Str_2:
        ; Setup parameters for call to function OLED_Set_Pos
        MOV     R2,?V0 + 1
        MOV     R1,?V0 + 0
        LCALL   ??OLED_Set_Pos?relay
//  349         for(i=0;i<6;i++)     
        MOV     ?V0 + 5,#0x0
//  350             OLED_WrDat(F6x8[c][i]);  
??OLED_P6x8Str_3:
        ; Setup parameters for call to function OLED_WrDat
        MOV     ?V0 + 2,?V0 + 5
        MOV     A,?V0 + 6
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#F6x8 & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(F6x8 >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_18:
        INC     ?V0 + 5
        MOV     A,?V0 + 5
        CLR     C
        SUBB    A,#0x6
        JC      ??OLED_P6x8Str_3
//  351         x+=6;
        MOV     A,#0x6
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
//  352         j++;
        INC     ?V0 + 4
//  353     }
??OLED_P6x8Str_0:
        MOV     ?V0 + 2,?V0 + 4
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_12:
        JNZ     ??OLED_P6x8Str_1
        CFI EndBlock cfiBlock22
//  354 }
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock23
//  355 /*******************¹¦ÄÜÃèÊö£ºÏÔÊ¾8*16Ò»×é±ê×¼ASCII×Ö·û´®     ÏÔÊ¾µÄ×ø±ê£¨x,y£©£¬yÎªÒ³·¶Î§0¡«7****************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  356 void OLED_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[])
OLED_P8x16Str:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function OLED_P8x16Str
        CODE
//  357 {
        FUNCALL OLED_P8x16Str, OLED_Set_Pos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_P8x16Str, OLED_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_P8x16Str, OLED_Set_Pos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_P8x16Str, OLED_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  358     unsigned char c=0,i=0,j=0;
        MOV     ?V0 + 7,#0x0
        SJMP    ??OLED_P8x16Str_0
//  359     while (ch[j]!='\0')
//  360     {    
//  361         c =ch[j]-32;
??OLED_P8x16Str_1:
        ADD     A,#-0x20
        MOV     ?V0 + 4,A
//  362         if(x>120){x=0;y++;}
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x79
        JC      ??OLED_P8x16Str_2
        MOV     ?V0 + 0,#0x0
        INC     ?V0 + 1
//  363         OLED_Set_Pos(x,y);    
??OLED_P8x16Str_2:
        ; Setup parameters for call to function OLED_Set_Pos
        MOV     R2,?V0 + 1
        MOV     R1,?V0 + 0
        LCALL   ??OLED_Set_Pos?relay
//  364         for(i=0;i<8;i++)     
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 5,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//  365             OLED_WrDat(F8X16[c*16+i]);
??OLED_P8x16Str_3:
        ; Setup parameters for call to function OLED_WrDat
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     A,#F8X16 & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(F8X16 >> 8) & 0xff
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        JC      ??OLED_P8x16Str_3
//  366         OLED_Set_Pos(x,y+1);    
        ; Setup parameters for call to function OLED_Set_Pos
        MOV     A,#0x1
        ADD     A,?V0 + 1
        MOV     R2,A
        MOV     R1,?V0 + 0
        LCALL   ??OLED_Set_Pos?relay
//  367         for(i=0;i<8;i++)     
        MOV     ?V0 + 6,#0x0
//  368             OLED_WrDat(F8X16[c*16+i+8]);  
??OLED_P8x16Str_4:
        ; Setup parameters for call to function OLED_WrDat
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     A,#(F8X16 + 8) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((F8X16 + 8) >> 8) & 0xff
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        JC      ??OLED_P8x16Str_4
//  369         x+=8;
        MOV     A,#0x8
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
//  370         j++;
        INC     ?V0 + 7
//  371     }
??OLED_P8x16Str_0:
        MOV     ?V0 + 2,?V0 + 7
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_13:
        JNZ     ??OLED_P8x16Str_1
        CFI EndBlock cfiBlock24
//  372 }
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOV     ?V0 + 4,?V0 + 6
        MOV     A,?V0 + 2
        ADD     A,?V0 + 4
        MOV     R0,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R1,A
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        ADDC    A,R1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_19:
        INC     ?V0 + 6
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,#0x8
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_2
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_3
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_0
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_1
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_17
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??OLED_WrDat?relay
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41
//  373 /*****************¹¦ÄÜÃèÊö£ºÏÔÊ¾16*16µãÕó  ÏÔÊ¾µÄ×ø±ê£¨x,y£©£¬yÎªÒ³·¶Î§0¡«7****************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  374 void OLED_P16x16Ch(unsigned char x, unsigned char y, unsigned char* F16x16, unsigned char N)
OLED_P16x16Ch:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI Function OLED_P16x16Ch
        CODE
//  375 {
        FUNCALL OLED_P16x16Ch, OLED_Set_Pos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_P16x16Ch, OLED_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_P16x16Ch, OLED_Set_Pos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_P16x16Ch, OLED_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 3,R2
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  376     unsigned char wm=0;
//  377     unsigned int adder=32*N;  //      
        MOV     ?V0 + 4,R3
        MOV     ?V0 + 5,#0x0
        MOV     A,#0x5
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
//  378     OLED_Set_Pos(x , y);
        ; Setup parameters for call to function OLED_Set_Pos
        LCALL   ??OLED_Set_Pos?relay
//  379     for(wm = 0;wm < 16;wm++)  //             
        MOV     ?V0 + 4,#0x10
//  380     {
//  381         OLED_WrDat(F16x16[adder]);    
??OLED_P16x16Ch_0:
        ; Setup parameters for call to function OLED_WrDat
        LCALL   ?Subroutine4 & 0xFFFF
//  382         adder += 1;
//  383     }      
??CrossCallReturnLabel_0:
        JNZ     ??OLED_P16x16Ch_0
//  384     OLED_Set_Pos(x,y + 1); 
        ; Setup parameters for call to function OLED_Set_Pos
        MOV     A,#0x1
        ADD     A,?V0 + 3
        MOV     R2,A
        MOV     R1,?V0 + 2
        LCALL   ??OLED_Set_Pos?relay
//  385     for(wm = 0;wm < 16;wm++) //         
        MOV     ?V0 + 4,#0x10
//  386     {
//  387         OLED_WrDat(F16x16[adder]);
??OLED_P16x16Ch_1:
        ; Setup parameters for call to function OLED_WrDat
        LCALL   ?Subroutine4 & 0xFFFF
//  388         adder += 1;
//  389     }           
??CrossCallReturnLabel_1:
        JNZ     ??OLED_P16x16Ch_1
//  390 }
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_16:
        DEC     ?V0 + 4
        MOV     A,?V0 + 4
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45
//  391 /***********¹¦ÄÜÃèÊö£ºÏÔÊ¾ÏÔÊ¾BMPÍ¼Æ¬128¡Á64ÆðÊ¼µã×ø±ê(x,y),xµÄ·¶Î§0¡«127£¬yÎªÒ³µÄ·¶Î§0¡«7*****************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  392 void Draw_BMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP[])
Draw_BMP:
        CFI Block cfiBlock46 Using cfiCommon0
        CFI Function Draw_BMP
        CODE
//  393 {     
        FUNCALL Draw_BMP, OLED_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Draw_BMP, OLED_Set_Pos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 3,R1
        MOV     ?V0 + 6,R3
        MOV     ?V0 + 7,R4
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
//  394     unsigned int j=0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  395     unsigned char x,y;
//  396     
//  397     if(y1%8==0) y=y1/8;      
//  398     else y=y1/8+1;
//  399     for(y=y0;y<y1;y++)
        MOV     ?V0 + 2,R2
        SJMP    ??Draw_BMP_0
//  400     {
//  401         OLED_Set_Pos(x0,y);                
//  402         for(x=x0;x<x1;x++)
//  403         {      
//  404             OLED_WrDat(BMP[j++]);            
??Draw_BMP_1:
        ; Setup parameters for call to function OLED_WrDat
        LCALL   ?Subroutine12 & 0xFFFF
//  405         }
??CrossCallReturnLabel_17:
        INC     ?V0 + 4
??Draw_BMP_2:
        MOV     A,?V0 + 4
        CLR     C
        SUBB    A,?V0 + 6
        JC      ??Draw_BMP_1
        INC     ?V0 + 2
??Draw_BMP_0:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 7
        JNC     ??Draw_BMP_3
        ; Setup parameters for call to function OLED_Set_Pos
        MOV     R2,?V0 + 2
        MOV     R1,?V0 + 3
        LCALL   ??OLED_Set_Pos?relay
        MOV     ?V0 + 4,?V0 + 3
        SJMP    ??Draw_BMP_2
//  406     }
//  407 } 
??Draw_BMP_3:
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_1
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50
//  408 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  409 void OLED_welcome()
OLED_welcome:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI Function OLED_welcome
        CODE
//  410 {
        FUNCALL OLED_welcome, OLED_P8x16Str
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OLED_welcome, OLED_P8x16Str
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  411     int i=0;
//  412 
//  413     for(i=0; i<4; i++)
//  414     {
//  415       //OLED_P16x16Ch(16*(i+2), 0, i);
//  416     }
//  417     
//  418 
//  419     for(i=0; i<7; i++)
//  420     {
//  421       //OLED_P16x16Ch(8+16*i, 2, 4+i);
//  422     }
//  423     
//  424     OLED_P8x16Str(16, 4, "QQ:2357481431");
        ; Setup parameters for call to function OLED_P8x16Str
        MOV     R4,#`?<Constant "QQ:2357481431">` & 0xff
        MOV     R5,#(`?<Constant "QQ:2357481431">` >> 8) & 0xff
        MOV     R2,#0x4
        MOV     R1,#0x10
        LCALL   ??OLED_P8x16Str?relay
//  425     OLED_P8x16Str(32, 6, "2014-10-01");
        ; Setup parameters for call to function OLED_P8x16Str
        MOV     R4,#`?<Constant "2014-10-01">` & 0xff
        MOV     R5,#(`?<Constant "2014-10-01">` >> 8) & 0xff
        MOV     R2,#0x6
        MOV     R1,#0x20
        LCALL   ??OLED_P8x16Str?relay
//  426 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock51

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DelayMS?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DelayMS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OLED_DLY_ms?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OLED_DLY_ms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OLED_WrDat?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OLED_WrDat

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OLED_WrCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OLED_WrCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OLED_Set_Pos?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OLED_Set_Pos

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OLED_Fill?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OLED_Fill

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OLED_CLS?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OLED_CLS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OLED_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OLED_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OLED_P6x8Str?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OLED_P6x8Str

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OLED_P8x16Str?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OLED_P8x16Str

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OLED_P16x16Ch?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OLED_P16x16Ch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Draw_BMP?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Draw_BMP

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OLED_welcome?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OLED_welcome

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "QQ:2357481431">`:
        DB "QQ:2357481431"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "2014-10-01">`:
        DB "2014-10-01"

        END
// 
//   895 bytes in segment BANKED_CODE
//    78 bytes in segment BANK_RELAYS
//     3 bytes in segment SFR_AN
// 2 097 bytes in segment XDATA_ROM_C
// 
//   973 bytes of CODE  memory
// 2 097 bytes of CONST memory
//     0 bytes of DATA  memory (+ 3 bytes shared)
//
//Errors: none
//Warnings: none
