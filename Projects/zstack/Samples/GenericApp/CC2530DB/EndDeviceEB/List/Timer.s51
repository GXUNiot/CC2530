///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        21/Mar/2019  12:31:48 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\CNiot\Desktop\20190310A                  /
//                          ·À»ð·ÀµÁÏµÍ³\Project\CNiot\CC2530_API\Timer.c     /
//    Command line       =  -f "C:\Users\CNiot\Desktop\20190310A              /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev. /
//                          cfg" (-DCPU32MHZ -DROOT=__near_func               /
//                          -DBLINK_LEDS) -f "C:\Users\CNiot\Desktop\20190310 /
//                          A ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Ge /
//                          nericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConf /
//                          ig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0         /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\CNiot\Desktop\20 /
//                          190310A ·À»ð·ÀµÁÏµÍ³\Project\CNiot\CC2530_API\Tim /
//                          er.c" -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D  /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D CNIOT -D            /
//                          xPOWER_SAVING -lC "C:\Users\CNiot\Desktop\2019031 /
//                          0A ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\G /
//                          enericApp\CC2530DB\EndDeviceEB\List\" -lA         /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\EndDeviceEB\List\"                /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\EndDeviceEB\Obj\" -e --debug      /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\" -I "C:\Users\CNiot\Desktop\2019 /
//                          0310A ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Sample /
//                          s\GenericApp\CC2530DB\..\SOURCE\" -I              /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I      /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "C:\Users\CNiot\Desktop\20190310A              /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\" -I "C:\Users\CNiot\Desktop\20190310A       /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TAR /
//                          GET\CC2530EB\" -I "C:\Users\CNiot\Desktop\2019031 /
//                          0A ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\G /
//                          enericApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL /
//                          \MCU\CCSOC\" -I "C:\Users\CNiot\Desktop\20190310A /
//                           ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gen /
//                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\I /
//                          NCLUDE\" -I "C:\Users\CNiot\Desktop\20190310A     /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\A /
//                          F\" -I "C:\Users\CNiot\Desktop\20190310A          /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\" -I "C:\Users\CNiot\Desktop\20190310A         /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\" -I "C:\Users\CNiot\Desktop\20190310A         /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          API\" -I "C:\Users\CNiot\Desktop\20190310A        /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\" -I "C:\Users\CNiot\Desktop\20190310A         /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\" -I "C:\Users\CNiot\Desktop\20190310A         /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8 /
//                          W\" -I "C:\Users\CNiot\Desktop\20190310A          /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"  /
//                          -I "C:\Users\CNiot\Desktop\20190310A              /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SADDR\" -I "C:\Users\CNiot\Desktop\20190310A    /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\" -I "C:\Users\CNiot\Desktop\20190310A    /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INC /
//                          LUDE\" -I "C:\Users\CNiot\Desktop\20190310A       /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIG /
//                          H_LEVEL\" -I "C:\Users\CNiot\Desktop\20190310A    /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "C:\Users\CNiot\Desktop\2019031 /
//                          0A ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\G /
//                          enericApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\ /
//                          LOW_LEVEL\srf04\SINGLE_CHIP\" -I                  /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\CNIOT\" -I         /
//                          "C:\Users\CNiot\Desktop\20190310A                 /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\CNIOT\ZStack_API\" /
//                           -I "C:\Users\CNiot\Desktop\20190310A             /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\CNIOT\CC2530_API\" /
//                           -I "C:\Users\CNiot\Desktop\20190310A             /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\CNIOT\DRIVER_API\" /
//                           -Ohz                                             /
//    List file          =  C:\Users\CNiot\Desktop\20190310A                  /
//                          ·À»ð·ÀµÁÏµÍ³\Project\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\EndDeviceEB\List\Timer.s51        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Timer

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?FLT_TO_UL
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_Z

        PUBWEAK `??T4_ISR??INTVEC 99`
        PUBLIC ??T4_Init?relay
        FUNCTION ??T4_Init?relay,0203H
        PUBLIC ??Ticker?relay
        FUNCTION ??Ticker?relay,0203H
        PUBLIC ??TickerDel?relay
        FUNCTION ??TickerDel?relay,0203H
        PUBLIC ??Timeout?relay
        FUNCTION ??Timeout?relay,0203H
        PUBLIC ??TimeoutDel?relay
        FUNCTION ??TimeoutDel?relay,0203H
        PUBWEAK T4CC0
        PUBWEAK T4CTL
        PUBLIC T4_ISR
        FUNCTION T4_ISR,0233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC T4_Init
        FUNCTION T4_Init,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC Ticker
        FUNCTION Ticker,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC TickerDel
        FUNCTION TickerDel,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC TickerTask
        PUBLIC Timeout
        FUNCTION Timeout,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC TimeoutDel
        FUNCTION TimeoutDel,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC TimeoutTask
        PUBWEAK _A_IEN0
        PUBWEAK _A_IEN1
        PUBWEAK __Constant_0
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_ffffffff
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
T4_ISR              SYMBOL "T4_ISR"
`??T4_ISR??INTVEC 99` SYMBOL "??INTVEC 99", T4_ISR
T4_Init             SYMBOL "T4_Init"
??T4_Init?relay     SYMBOL "?relay", T4_Init
Ticker              SYMBOL "Ticker"
??Ticker?relay      SYMBOL "?relay", Ticker
TickerDel           SYMBOL "TickerDel"
??TickerDel?relay   SYMBOL "?relay", TickerDel
Timeout             SYMBOL "Timeout"
??Timeout?relay     SYMBOL "?relay", Timeout
TimeoutDel          SYMBOL "TimeoutDel"
??TimeoutDel?relay  SYMBOL "?relay", TimeoutDel

// C:\Users\CNiot\Desktop\20190310A ·À»ð·ÀµÁÏµÍ³\Project\CNiot\CC2530_API\Timer.c
//    1 #include "Timer.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ebH
// unsigned char volatile __sfr T4CTL
T4CTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0edH
// unsigned char volatile __sfr T4CC0
T4CC0:
        DATA8
        DS 1
//    2 #include <ioCC2530.h>
//    3 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    4 TIMEOUTTask TimeoutTask[TIMEOUT_TASK_MAX] = {{0,0,NULL}};
TimeoutTask:
        DS 56
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    5 TICKERTask  TickerTask[TICKER_TASK_MAX]   = {{0,0,NULL}};
TickerTask:
        DS 80
        REQUIRE __INIT_XDATA_Z
//    6 
//    7 /****************************************
//    8  * º¯ÊýÃû£º T4_Init
//    9  * ¹¦ÄÜ£º   ³õÊ¼»¯¶¨Ê±Æ÷4
//   10  *      
//   11  * ²ÎÊý:    void
//   12  *      
//   13  * ·µ»ØÖµ£º void
//   14 ****************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   15 void T4_Init(void)
T4_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function T4_Init
        CODE
//   16 {
        ; Saved register size: 0
        ; Auto size: 0
//   17     T4CTL &= ~(0xFF);
        MOV     0xeb,#0x0
//   18   
//   19   //T4CTL |= 0x01<<5;   //2
//   20   //T4CTL |= 0x02<<5;   //4
//   21   //T4CTL |= 0x03<<5;   //8
//   22   //T4CTL |= 0x04<<5;   //16
//   23   //T4CTL |= 0x05<<5;   //32
//   24   T4CTL |= 0x06<<5;   //64
        ORL     0xeb,#0xc0
//   25   //T4CTL |= 0x07<<5;   //128
//   26   T4CTL |= 0x08;
        ORL     0xeb,#0x8
//   27   T4CTL |= 0x03;
        ORL     0xeb,#0x3
//   28     
//   29   T4IE = 1;
        SETB    0xb8.4
//   30   T4CC0 = 250;
        MOV     0xed,#-0x6
//   31   T4CTL |= 0x10;
        ORL     0xeb,#0x10
//   32   EA = 1;
        SETB    0xa8.7
//   33 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE T4CTL
        REQUIRE _A_IEN1
        REQUIRE T4CC0
        REQUIRE _A_IEN0
//   34 
//   35 /****************************************
//   36  * º¯ÊýÃû£º TimeOut
//   37  * ¹¦ÄÜ£º   ¶¨Ê±µ÷ÓÃº¯Êý
//   38  *      
//   39  * ²ÎÊý:    *fun-º¯ÊýÖ¸Õë timeout-ÑÓÊ±ms
//   40  *      
//   41  * ·µ»ØÖµ£º uint8_t º¯Êý¶ÓÁÐÐòºÅ
//   42 ****************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   43 uint8_t Timeout(void (*fun)(void),float timeout)
Timeout:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Timeout
        CODE
//   44 {
        FUNCALL Timeout, T4_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
//   45   uint8_t i;
//   46   
//   47   if( !(T4CTL&0x10) )
        MOV     A,0xeb
        MOV     C,0xE0 /* A   */.4
        JC      ??Timeout_0
//   48   {
//   49     T4_Init();
        ; Setup parameters for call to function T4_Init
        LCALL   ??T4_Init?relay
//   50   }
//   51   
//   52   for(i=0; i<TIMEOUT_TASK_MAX; i++)
??Timeout_0:
        MOV     R2,#0x0
//   53   {
//   54     if( TimeoutTask[i].flag ==0 )
??Timeout_1:
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#TimeoutTask & 0xff
        ADD     A,R0
        MOV     R4,A
        MOV     A,#(TimeoutTask >> 8) & 0xff
        ADDC    A,R1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        JNZ     ??Timeout_2
//   55     {
//   56       TimeoutTask[i].flag = 1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//   57       TimeoutTask[i].count = (uint32_t)timeout*1000;
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_UL
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//   58       TimeoutTask[i].callback = fun;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//   59       return i+1;
        MOV     A,#0x1
        ADD     A,R2
        MOV     R1,A
//   60     }
??Timeout_3:
        LJMP    ?Subroutine0 & 0xFFFF
//   61     else if( i == 15 )
??Timeout_2:
        MOV     A,#0xf
        XRL     A,R2
        JNZ     ??Timeout_4
//   62     {
//   63       return 0;
??Timeout_5:
        MOV     R1,#0x0
        SJMP    ??Timeout_3
//   64     }
//   65   }
??Timeout_4:
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x8
        JNC     ??Timeout_5
        SJMP    ??Timeout_1
        CFI EndBlock cfiBlock1
        REQUIRE T4CTL
//   66   return 0;
//   67 }
//   68 
//   69 /****************************************
//   70  * º¯ÊýÃû£º TimeOutDel
//   71  * ¹¦ÄÜ£º   ½â³ýº¯Êý¶¨Ê±µ÷ÓÃ
//   72  *      
//   73  * ²ÎÊý:    index-º¯Êý¶ÓÁÐÐòºÅ
//   74  *      
//   75  * ·µ»ØÖµ£º 0-Ê§°Ü 1-³É¹¦
//   76 ****************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   77 uint8_t TimeoutDel(uint8_t index)
TimeoutDel:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function TimeoutDel
        CODE
//   78 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//   79   if( TimeoutTask[index-1].flag )
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#TimeoutTask & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(TimeoutTask >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x7
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??TimeoutDel_0
//   80   {
//   81     TimeoutTask[index-1].count = 0;
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     A,R0
        ADD     A,#-0x6
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        LCALL   ?XSTORE_R2345
//   82     TimeoutTask[index-1].callback = NULL;
        MOV     A,R0
        ADD     A,#-0x2
        MOV     DPL,A
        MOV     A,R1
        LCALL   ?Subroutine1 & 0xFFFF
//   83     return 1;
//   84   }
??CrossCallReturnLabel_0:
        SJMP    ??TimeoutDel_1
//   85   return 0;
??TimeoutDel_0:
        MOV     R1,#0x0
??TimeoutDel_1:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//   86 }
//   87 
//   88 /****************************************
//   89  * º¯ÊýÃû£º Ticker
//   90  * ¹¦ÄÜ£º   ¶¨Ê±µ÷ÓÃº¯Êý
//   91  *      
//   92  * ²ÎÊý:    *fun-º¯ÊýÖ¸Õë timeout-ÑÓÊ±ms
//   93  *      
//   94  * ·µ»ØÖµ£º uint8_t º¯Êý¶ÓÁÐÐòºÅ
//   95 ****************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   96 uint8_t Ticker(void (*fun)(void),float timeout)
Ticker:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function Ticker
        CODE
//   97 {
        FUNCALL Ticker, T4_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
//   98   uint8_t i;
//   99   
//  100   if( !(T4CTL&0x10) )
        MOV     A,0xeb
        MOV     C,0xE0 /* A   */.4
        JC      ??Ticker_0
//  101   {
//  102     T4_Init();
        ; Setup parameters for call to function T4_Init
        LCALL   ??T4_Init?relay
//  103   }
//  104   
//  105   for(i=0; i<TICKER_TASK_MAX; i++)
??Ticker_0:
        MOV     R4,#0x0
//  106   {
//  107     if( TickerTask[i].reload ==0 )
??Ticker_1:
        MOV     A,R4
        MOV     B,#0xa
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#TickerTask & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(TickerTask >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        ORL     A,?V0 + 6
        ORL     A,?V0 + 7
        JNZ     ??Ticker_2
//  108     {
//  109       TickerTask[i].reload = (uint32_t)timeout*1000;
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_UL
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  110       TickerTask[i].count = TickerTask[i].reload;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  111       TickerTask[i].callback = fun;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  112       return i+1;
        MOV     A,#0x1
        ADD     A,R4
        MOV     R1,A
//  113     }
??Ticker_3:
        SJMP    ?Subroutine0
//  114     else if( i == 15 )
??Ticker_2:
        MOV     A,#0xf
        XRL     A,R4
        JNZ     ??Ticker_4
//  115     {
//  116       return 0;
??Ticker_5:
        MOV     R1,#0x0
        SJMP    ??Ticker_3
//  117     }
//  118   }
??Ticker_4:
        INC     R4
        MOV     A,R4
        CLR     C
        SUBB    A,#0x8
        JNC     ??Ticker_5
        SJMP    ??Ticker_1
        CFI EndBlock cfiBlock3
        REQUIRE T4CTL
//  119   return 0;
//  120 }
//  121 
//  122 /****************************************
//  123  * º¯ÊýÃû£º TickerDel
//  124  * ¹¦ÄÜ£º   ½â³ýº¯Êý¶¨Ê±µ÷ÓÃ
//  125  *      
//  126  * ²ÎÊý:    index-º¯Êý¶ÓÁÐÐòºÅ
//  127  *      
//  128  * ·µ»ØÖµ£º 0-Ê§°Ü 1-³É¹¦
//  129 ****************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  130 uint8_t TickerDel(uint8_t index)
TickerDel:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function TickerDel
        CODE
//  131 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  132   if( TickerTask[index-1].reload )
        MOV     A,R1
        MOV     B,#0xa
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#TickerTask & 0xff
        ADD     A,R0
        MOV     R6,A
        MOV     A,#(TickerTask >> 8) & 0xff
        ADDC    A,R1
        MOV     R7,A
        MOV     A,R6
        ADD     A,#-0xa
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     DPL,R0
        MOV     DPH,A
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        ORL     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      ??TickerDel_0
//  133   {
//  134     TickerTask[index-1].reload = 0;
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     DPL,?V0 + 0
        MOV     DPH,R1
        LCALL   ?XSTORE_R2345
//  135     TickerTask[index-1].count = 0;
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     A,R6
        ADD     A,#-0x6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     DPH,A
        LCALL   ?XSTORE_R2345
//  136     TickerTask[index-1].callback = NULL;
        MOV     A,R6
        ADD     A,#-0x2
        MOV     DPL,A
        MOV     A,R7
        LCALL   ?Subroutine1 & 0xFFFF
//  137     return 1;
//  138   }
??CrossCallReturnLabel_1:
        SJMP    ??TickerDel_1
//  139   return 0;
??TickerDel_0:
        MOV     R1,#0x0
        CFI EndBlock cfiBlock4
??TickerDel_1:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  140 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        ADDC    A,#-0x1
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     R1,#0x1
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
//  141 
//  142 
//  143 #pragma vector = T4_VECTOR

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  144 __interrupt void T4_ISR(void)
T4_ISR:
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function T4_ISR
        CODE
//  145 {
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0x15
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI CFA_XSP16 add(XSP16, 21)
        ; Saved register size: 21
        ; Auto size: 0
//  146   uint8_t i;
//  147   
//  148   for(i=0; i<TIMEOUT_TASK_MAX;i++)
        MOV     ?V0 + 0,#0x0
//  149   {
//  150     if(TimeoutTask[i].flag)
??T4_ISR_0:
        MOV     A,?V0 + 0
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#TimeoutTask & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(TimeoutTask >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??T4_ISR_1
//  151     {
//  152       if( --TimeoutTask[i].count == 0 )
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        MOV     DPTR,#__Constant_ffffffff
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_TO_X
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine2
??CrossCallReturnLabel_2:
        JNZ     ??T4_ISR_1
//  153       {
//  154         TimeoutTask[i].callback();
        MOV     A,R2
        ADD     A,#0x5
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        ; Setup parameters for indirect call
        MOV     DPL,R0
        MOV     DPH,A
        LCALL   ?Subroutine3
??CrossCallReturnLabel_5:
        LCALL   ?CALL_IND
//  155         TimeoutTask[i].count = 0;
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?XSTORE_R2345
//  156         TimeoutTask[i].callback = NULL;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  157       }        
//  158     }
//  159   }
??T4_ISR_1:
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x8
        JC      ??T4_ISR_0
//  160   for(i=0; i<TICKER_TASK_MAX;i++)
        MOV     ?V0 + 0,#0x0
//  161   {
//  162     if(TickerTask[i].reload)
??T4_ISR_2:
        MOV     A,?V0 + 0
        MOV     B,#0xa
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#TickerTask & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(TickerTask >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine2
??CrossCallReturnLabel_3:
        JZ      ??T4_ISR_3
//  163     {
//  164       if( --TickerTask[i].count == 0 )
        MOV     A,R6
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        MOV     DPTR,#__Constant_ffffffff
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPL,?V0 + 2
        MOV     DPH,R1
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_TO_X
        MOV     DPL,?V0 + 2
        MOV     DPH,R1
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine2
??CrossCallReturnLabel_4:
        JNZ     ??T4_ISR_3
//  165       {
//  166         TickerTask[i].callback();
        ; Setup parameters for indirect call
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine3
??CrossCallReturnLabel_6:
        LCALL   ?CALL_IND
//  167         TickerTask[i].count = TickerTask[i].reload;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?XLOAD_R2345
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?XSTORE_R2345
//  168       } 
//  169     }
//  170   }
??T4_ISR_3:
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x8
        JC      ??T4_ISR_2
//  171 }
        MOV     R7,#0x8
        LJMP    ?INTERRUPT_LEAVE_XSP
        CFI EndBlock cfiBlock9

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond10 Using cfiCommon1
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI A Frame(CFA_SP, 3)
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-3
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond11 Using cfiCommon1
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond11) A Frame(CFA_SP, 3)
        CFI (cfiCond11) R0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond11) R1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond11) R2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond11) R3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+-3
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond13 Using cfiCommon1
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI A Frame(CFA_SP, 3)
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-3
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond14 Using cfiCommon1
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond14) A Frame(CFA_SP, 3)
        CFI (cfiCond14) R0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond14) R1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond14) R2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond14) R3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+-3
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond15 Using cfiCommon1
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond15) A Frame(CFA_SP, 3)
        CFI (cfiCond15) R0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond15) R1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond15) R2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond15) R3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+-3
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        ORL     A,?V0 + 6
        ORL     A,?V0 + 7
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        COMMON INTVEC:CODE:ROOT(0)
        ORG 99
`??T4_ISR??INTVEC 99`:
        LJMP       (T4_ISR)

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ffffffff:
        DD 4294967295

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??T4_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    T4_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Timeout?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Timeout

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TimeoutDel?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TimeoutDel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Ticker?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Ticker

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TickerDel?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TickerDel

        END
// 
// 481 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//   3 bytes in segment INTVEC
// 277 bytes in segment NEAR_CODE
//   4 bytes in segment SFR_AN
//  12 bytes in segment XDATA_ROM_C
// 136 bytes in segment XDATA_Z
// 
// 788 bytes of CODE  memory (+  3 bytes shared)
//   0 bytes of CONST memory (+ 12 bytes shared)
//   0 bytes of DATA  memory (+  4 bytes shared)
// 136 bytes of XDATA memory
//
//Errors: none
//Warnings: none
